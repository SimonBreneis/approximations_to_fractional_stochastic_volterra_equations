import matplotlib.pyplot as plt

from functions import *

'''
Fitting implied volatility surfaces for European call options. Parameters used are:
k_vec = np.linspace(-1.5, 0.75, 451)
S, K, H, lambda_, rho, nu, theta, V_0, rel_tol = 1, np.exp(k_vec), 0.1, 0.3, -0.7, 0.3, 0.02, 0.02, 1e-05
T = np.linspace(0.04, 1, 25)
Given below are the largest nodes, the maximal (over the maturity) relative error of the kernel, and the maximal
(over the maturity and the log-moneyness) error of the implied volatility. 3 nodes were used. The arrays are of the 
shape (3, 25). Here, the first index corresponds to the way we obtained the quadrature rule. 0 means paper 
(observation), 1 means optimizing the kernel, and 2 means using the european scheme.
The time T_0 used for obtaining these quadrature rules is the second index.
True surface is the actual implied volatility surface.
In fact, for maturity T, the log-moneyness k_vec * sqrt(T) was used.
'''

true_iv_surface_eur_call = np.load('true surface.npy')

smile_error_iv_surface_eur_call = np.array([[0.35344619, 0.29088646, 0.2461029, 0.2144478, 0.21523023,
                                             0.22084815, 0.22428964, 0.22628439, 0.22727469, 0.22754492,
                                             0.22728645, 0.22663274, 0.22567963, 0.22449757, 0.22337635,
                                             0.22423035, 0.22483499, 0.22522905, 0.22544408, 0.22550605,
                                             0.22543644, 0.22525327, 0.2249717, 0.22460459, 0.22416292],
                                            [0.31146992, 0.25086997, 0.20508167, 0.16989815, 0.1419354,
                                             0.11916956, 0.10032394, 0.0845348, 0.07118483, 0.0598168,
                                             0.050079, 0.0416977, 0.03445417, 0.03110706, 0.02982506,
                                             0.03060562, 0.03148878, 0.03215019, 0.03261579, 0.03290732,
                                             0.0330446, 0.03304466, 0.03292296, 0.03269391, 0.0323689],
                                            [0.12543412, 0.10459147, 0.08253867, 0.06499396, 0.05132938,
                                             0.04061975, 0.03215391, 0.02541618, 0.02002936, 0.01571177,
                                             0.01224849, 0.00978465, 0.01057093, 0.01117848, 0.01161367,
                                             0.01189275, 0.01207648, 0.01257133, 0.01424745, 0.01582573,
                                             0.01730217, 0.01867522, 0.01994512, 0.02112055, 0.02221119]])

kernel_error_iv_surface_eur_call = np.array([[1.96649963, 1.36339683, 1.09228965, 0.93230178, 0.82564424,
                                              0.74944564, 0.6925486, 0.64875627, 0.61430636, 0.58676144,
                                              0.56446256, 0.54623638, 0.54566541, 0.54723797, 0.54854078,
                                              0.54961674, 0.55050025, 0.55121921, 0.55179651, 0.55225106,
                                              0.55259868, 0.55285265, 0.55302424, 0.55312305, 0.55315732],
                                             [0.66195922, 0.59552544, 0.54784999, 0.50867469, 0.47458403,
                                              0.44421507, 0.41703146, 0.39281528, 0.37144056, 0.35278481,
                                              0.33669223, 0.33196601, 0.33444584, 0.33667395, 0.33867597,
                                              0.34047661, 0.34209853, 0.34356255, 0.34488822, 0.34609269,
                                              0.34719191, 0.34820029, 0.34913045, 0.34999413, 0.35080206],
                                             [0.51084092, 0.46741831, 0.43782425, 0.45054789, 0.46066057,
                                              0.46910932, 0.47639065, 0.48279368, 0.48850316, 0.49364687,
                                              0.49831908, 0.50259295, 0.50652738, 0.51017096, 0.51356439,
                                              0.51674199, 0.51973279, 0.52256133, 0.5252483, 0.5278111,
                                              0.53026432, 0.53262015, 0.53488875, 0.5370786, 0.53919675]])

largest_node_iv_surface_eur_call = np.array([[3.32763862e+07, 1.66381931e+07, 1.10921287e+07, 8.31909656e+06,
                                              6.65527725e+06, 5.54606437e+06, 4.75376946e+06, 4.15954828e+06,
                                              3.69737625e+06, 3.32763862e+06, 3.02512602e+06, 2.77303219e+06,
                                              2.55972202e+06, 2.37688473e+06, 2.21842575e+06, 2.07977414e+06,
                                              1.95743448e+06, 1.84868812e+06, 1.75138875e+06, 1.66381931e+06,
                                              1.58458982e+06, 1.51256301e+06, 1.44679940e+06, 1.38651609e+06,
                                              1.33105545e+06],
                                             [4.77036024e+05, 2.38520358e+05, 1.59013162e+05, 1.19259704e+05,
                                              9.54081287e+04, 7.95066406e+04, 6.81483144e+04, 5.96298119e+04,
                                              5.29999630e+04, 4.77037067e+04, 4.33670771e+04, 3.97533059e+04,
                                              3.66960104e+04, 3.40738058e+04, 3.18027197e+04, 2.98142027e+04,
                                              2.80608605e+04, 2.65021553e+04, 2.51072086e+04, 2.38519660e+04,
                                              2.27160094e+04, 2.16833698e+04, 2.07407984e+04, 1.98768963e+04,
                                              1.90812219e+04],
                                             [1.89377551e+03, 9.46887739e+02, 6.31258494e+02, 4.73443878e+02,
                                              3.78755096e+02, 3.15629252e+02, 2.70539354e+02, 2.36721939e+02,
                                              2.10419501e+02, 1.89377548e+02, 1.72161410e+02, 1.57814623e+02,
                                              1.45675039e+02, 1.35269679e+02, 1.26251699e+02, 1.18360967e+02,
                                              1.11398558e+02, 1.05209751e+02, 9.96723939e+01, 9.46887742e+01,
                                              9.01797858e+01, 8.60807051e+01, 8.23380658e+01, 7.89073130e+01,
                                              7.57510205e+01]])


def plot_iv_surface_eur_call_errors_3_dim():
    T = np.linspace(0.04, 1, 25)
    fig, ax1 = plt.subplots()
    ax2 = ax1.twinx()
    ax1.plot(T, kernel_error_iv_surface_eur_call[0, :], '--', color='red', label='Kernel error')
    ax1.plot(T, smile_error_iv_surface_eur_call[0, :], color='red', label='Volatility error')
    ax2.plot(T, largest_node_iv_surface_eur_call[0, :], 'x-', color='red', label='Largest node')
    ax1.plot(T, kernel_error_iv_surface_eur_call[1, :], '--', color='green')
    ax1.plot(T, smile_error_iv_surface_eur_call[1, :], color='green')
    ax2.plot(T, largest_node_iv_surface_eur_call[1, :], 'x-', color='green')
    ax1.plot(T, kernel_error_iv_surface_eur_call[2, :], '--', color='blue')
    ax1.plot(T, smile_error_iv_surface_eur_call[2, :], color='blue')
    ax2.plot(T, largest_node_iv_surface_eur_call[2, :], 'x-', color='blue')
    ax1.set_xlabel('Time ' + r'$T_0$' + ' used for obtaining the Markovian approximation')
    ax1.set_ylabel('Relative error')
    ax2.set_ylabel('Largest node')
    ax2.set_yscale('log')
    ax1.set_yscale('log')
    ax1.legend(loc='upper right')
    ax2.legend(loc='right')
    plt.show()


'''
True rough Heston smile under the following parameters
k_vec = np.linspace(-0.5, 0.1, 101)
S, K, H, lambda_, rho, nu, theta, V_0, T, rel_tol = 1, np.exp(k_vec), 0.07, 0.6, -0.8, 0.5, 0.01, 0.01, 0.04, 1e-04
'''

rHeston_difficult_params = np.array([0.6193224, 0.61516358, 0.61097976, 0.60677201, 0.60253891,
                                     0.59828059, 0.59399642, 0.58968578, 0.58534864, 0.58098384,
                                     0.57659171, 0.57217077, 0.56772152, 0.56324234, 0.55873372,
                                     0.55419403, 0.54962364, 0.54502102, 0.54038632, 0.53571816,
                                     0.53101644, 0.52627994, 0.5215083, 0.51670045, 0.51185578,
                                     0.50697333, 0.50205229, 0.49709175, 0.49209071, 0.4870483,
                                     0.48196336, 0.47683499, 0.47166189, 0.46644312, 0.46117725,
                                     0.45586322, 0.45049953, 0.44508496, 0.43961792, 0.43409701,
                                     0.42852052, 0.42288689, 0.41719425, 0.41144082, 0.4056246,
                                     0.39974354, 0.39379544, 0.38777798, 0.38168874, 0.37552507,
                                     0.36928424, 0.36296326, 0.35655903, 0.35006813, 0.343487,
                                     0.33681174, 0.33003823, 0.32316192, 0.31617801, 0.3090812,
                                     0.30186581, 0.29452555, 0.28705363, 0.27944251, 0.27168392,
                                     0.26376868, 0.25568656, 0.24742611, 0.23897442, 0.23031687,
                                     0.22143673, 0.21231473, 0.20292844, 0.1932515, 0.18325249,
                                     0.17289346, 0.16212772, 0.15089679, 0.13912555, 0.12671495,
                                     0.11353026, 0.09938329, 0.08401479, 0.06719413, 0.05074783,
                                     0.04680469, 0.05148665, 0.05743842, 0.06341134, 0.06917078,
                                     0.0746759, 0.07993387, 0.08496362, 0.08978653, 0.09442177,
                                     0.09888792, 0.1031991, 0.107371, 0.11141233, 0.11533805,
                                     0.11915087])

'''
Markovian approximations of rough Heston surfaces with parameters
T = log_linspace(0.004, 1, 25), 
K = np.exp(np.linspace(-1.25, 0.5, 351)[None, :] * np.sqrt(log_linspace(0.004, 1, 25))[:, None])
S, H, lambda_, rho, nu, theta, V_0, rel_tol = 1, 0.1, 0.3, -0.7, 0.3, 0.02, 0.02, 1e-05
Computed for modes in ['paper', 'optimized', 'european'] and N=1, ..., 10
'''


def get_rHestonMarkov_surface(mode, N):
    return np.load(f'rHeston Markov {N} dim {mode}, H=0.1, lambda=0.3, rho=-0.7, nu=0.3, theta=0.02, V_0=0.02, '
                   f'T=(0.004, 1.0, 25), K=(-1.25, 0.5, 25).npy')


'''
Rough Heston skew and skews of the Markovian approximations (with N=1, ..., 10) with parameters
T = np.exp(np.linspace(np.log(0.004), np.log(1), 25))
H, lambda_, rho, nu, theta, V_0, rel_tol = 0.1, 0.3, -0.7, 0.3, 0.02, 0.02, 1e-04
'''

rHeston_skew = np.array([4.30365361, 3.89725263, 3.52734101, 3.19069485, 2.8843776,
                         2.60570871, 2.35224616, 2.12176241, 1.91222756, 1.72179256,
                         1.5487712, 1.39162817, 1.24896587, 1.11951076, 1.00210337,
                         0.8956886, 0.79930542, 0.71207854, 0.63321086, 0.56197556,
                         0.49770991, 0.43980871, 0.38771885, 0.3409341, 0.29899042])

rHeston_skew_abi_jaber = np.array([[0.95084298, 0.94988527, 0.94862829, 0.94696528, 0.94474616,
                                    0.94175134, 0.93765697, 0.9319592, 0.92384433, 0.91201522,
                                    0.89464554, 0.86966463, 0.83541153, 0.79131328, 0.73823658,
                                    0.6782358, 0.61401324, 0.54834972, 0.48365084, 0.42176285,
                                    0.36396041, 0.31103274, 0.26338879, 0.22115086, 0.18422696],
                                   [0.95178173, 0.95084712, 0.94962637, 0.94802518, 0.94590439,
                                    0.94307045, 0.93923658, 0.93396266, 0.92653442, 0.9158029,
                                    0.90014104, 0.87769883, 0.84698424, 0.80751074, 0.75999524,
                                    0.70617926, 0.64830167, 0.58857796, 0.5288717, 0.47060037,
                                    0.41480039, 0.36222244, 0.3134201, 0.2687692, 0.22848188],
                                   [0.75093737, 0.75049586, 0.74992843, 0.74919434, 0.74823732,
                                    0.74698549, 0.74533284, 0.74313154, 0.74016571, 0.73610495,
                                    0.73041522, 0.72223618, 0.71033076, 0.69326437, 0.66985154,
                                    0.63964361, 0.60315926, 0.56176293, 0.51723329, 0.47135587,
                                    0.42562257, 0.3811217, 0.3385712, 0.29841826, 0.26094225],
                                   [0.68515119, 0.68480828, 0.68436998, 0.68380622, 0.68307615,
                                    0.68212611, 0.68088307, 0.67924211, 0.67705596, 0.67410936,
                                    0.67006994, 0.66439885, 0.65624396, 0.64442701, 0.62766051,
                                    0.6049833, 0.57617597, 0.54190559, 0.50353013, 0.46273107,
                                    0.4211118, 0.37997455, 0.34023999, 0.30248725, 0.26704627],
                                   [0.61233358, 0.61207605, 0.61174906, 0.61132953, 0.61078991,
                                    0.61009321, 0.60918888, 0.60800582, 0.60644888, 0.6043803,
                                    0.6016014, 0.59780479, 0.59249885, 0.58491366, 0.57399586,
                                    0.55861132, 0.5379331, 0.51180347, 0.48085383, 0.44632606,
                                    0.40973056, 0.37251165, 0.3358431, 0.30054781, 0.26714006],
                                   [0.56034335, 0.5601353, 0.55987044, 0.55953195, 0.55909827,
                                    0.55854202, 0.55782314, 0.55689047, 0.55567167, 0.55406805,
                                    0.55193905, 0.54907831, 0.54516848, 0.53970261, 0.53191102,
                                    0.52079624, 0.50536713, 0.48500472, 0.45975217, 0.43035248,
                                    0.39803751, 0.36420491, 0.33013643, 0.29683563, 0.264993],
                                   [0.47213183, 0.47198891, 0.47180567, 0.47157383, 0.47127876,
                                    0.47090189, 0.4704205, 0.46980242, 0.46900423, 0.46796999,
                                    0.46662057, 0.46484776, 0.46249708, 0.45934017, 0.45502489,
                                    0.44900762, 0.44053671, 0.42876813, 0.41303545, 0.39313476,
                                    0.36945559, 0.34288827, 0.3145807, 0.28567965, 0.25714813],
                                   [0.49271763, 0.49256094, 0.49236152, 0.49210793, 0.49178477,
                                    0.49137194, 0.49084184, 0.49016042, 0.48927872, 0.48813158,
                                    0.48662921, 0.48464665, 0.48200173, 0.47841969, 0.47347013,
                                    0.4665027, 0.45666858, 0.44310737, 0.42525784, 0.40311992,
                                    0.37730679, 0.34887687, 0.31905818, 0.2889965, 0.25960413],
                                   [0.51161804, 0.51144821, 0.51123196, 0.51095645, 0.51060536,
                                    0.5101559, 0.50957856, 0.50883379, 0.50786829, 0.50660789,
                                    0.5049518, 0.50275508, 0.4998075, 0.495782, 0.49016454,
                                    0.48220302, 0.47097626, 0.45564518, 0.43578328, 0.41159419,
                                    0.38388724, 0.35385056, 0.32275713, 0.2917315, 0.26162983],
                                   [0.52913679, 0.52895321, 0.52872042, 0.52842326, 0.52804553,
                                    0.52755926, 0.5269347, 0.52612695, 0.52507683, 0.52370249,
                                    0.52188986, 0.51947525, 0.51621501, 0.51172622, 0.505409,
                                    0.49641712, 0.4837828, 0.46671979, 0.44495446, 0.41888606,
                                    0.38949239, 0.35805746, 0.32587463, 0.29403525, 0.26333844]
                                   ])

rHeston_skew_paper = np.array([[1.59304171, 1.60086588, 1.61080545, 1.62335135, 1.63888245,
                                1.65688093, 1.6749977, 1.68859915, 1.69135101, 1.67709666,
                                1.64185825, 1.58481149, 1.50817756, 1.41623422, 1.31416072,
                                1.20699724, 1.09905995, 0.99367052, 0.89313859, 0.79888666,
                                0.71163379, 0.63158524, 0.55860126, 0.49233466, 0.43233442],
                               [1.30230737, 1.29822251, 1.29663728, 1.29747388, 1.3007791,
                                1.30665956, 1.31503137, 1.32519941, 1.33499525, 1.34057922,
                                1.33700739, 1.31970957, 1.28594416, 1.23548699, 1.17045236,
                                1.09440165, 1.01144521, 0.9254844, 0.83976812, 0.75672389,
                                0.67797823, 0.60447613, 0.53663826, 0.47452146, 0.41794512],
                               [2.42948249, 2.12672948, 1.87652523, 1.67153581, 1.50481022,
                                1.37005032, 1.26172832, 1.17509304, 1.10610846, 1.05130419,
                                1.00768915, 0.97239116, 0.94245217, 0.91460402, 0.88545443,
                                0.85195673, 0.812181, 0.76572113, 0.71358272, 0.65764751,
                                0.60007607, 0.54284023, 0.48748228, 0.43505041, 0.38614839],
                               [3.54724249, 3.28800982, 3.01338808, 2.73244272, 2.45534242,
                                2.19121695, 1.94691928, 1.72666325, 1.53226643, 1.36366359,
                                1.21952033, 1.09767688, 0.99549483, 0.91008699, 0.83846809,
                                0.77763494, 0.72464679, 0.67667399, 0.63121371, 0.58637441,
                                0.54114306, 0.49541491, 0.44976776, 0.40508494, 0.36222424],
                               [3.05856632, 2.84058185, 2.65419172, 2.48993181, 2.33883817,
                                2.19299366, 2.04637095, 1.89577621, 1.74120646, 1.58529113,
                                1.43205761, 1.28564147, 1.14939512, 1.02549949, 0.91495427,
                                0.81777359, 0.73323775, 0.66012019, 0.59686723, 0.5417426,
                                0.49296618, 0.44887443, 0.40807689, 0.36960671, 0.33297692],
                               [3.5057902, 3.13423636, 2.80741736, 2.52463651, 2.28269662,
                                2.07683293, 1.90140065, 1.75035297, 1.61758951, 1.49731169,
                                1.38448152, 1.27538288, 1.1680758, 1.06243954, 0.95970661,
                                0.86171178, 0.77020429, 0.68643256, 0.61101669, 0.54398338,
                                0.48489862, 0.43300421, 0.38734374, 0.34688016, 0.31061121],
                               [3.64325507, 3.35175115, 3.06870424, 2.79278714, 2.52632012,
                                2.27367128, 2.03942653, 1.8270247, 1.63809868, 1.47247791,
                                1.32854765, 1.20371388, 1.09481272, 0.9984659, 0.91141559,
                                0.83088113, 0.75488162, 0.68241249, 0.61336146, 0.54820319,
                                0.48759319, 0.43207128, 0.38190934, 0.3370878, 0.29734234],
                               [3.60992136, 3.30107884, 3.02658349, 2.77712485, 2.54484517,
                                2.32429043, 2.1129611, 1.91110192, 1.720761, 1.54452141,
                                1.38442653, 1.24139658, 1.11512427, 1.00428806, 0.90688324,
                                0.82055855, 0.74293667, 0.67191964, 0.60594599, 0.54413559,
                                0.48622585, 0.43236482, 0.38283851, 0.33785944, 0.29746356],
                               [3.73908473, 3.37650896, 3.05708548, 2.77674846, 2.52957187,
                                2.3088353, 2.10801226, 1.92168743, 1.74627405, 1.58028883,
                                1.42403413, 1.27879202, 1.14592794, 1.02623316, 0.91964982,
                                0.82532063, 0.74181155, 0.66739464, 0.60032643, 0.53910622,
                                0.48264854, 0.43035441, 0.38202857, 0.33770271, 0.29745017],
                               [3.86369125, 3.49378762, 3.15329034, 2.84493666, 2.56956363,
                                2.32568915, 2.10988784, 1.91757253, 1.74385622, 1.58437108,
                                1.43593079, 1.2968628, 1.16688294, 1.04655979, 0.93663799,
                                0.83750763, 0.74896128, 0.67021586, 0.60008877, 0.53724113,
                                0.48039339, 0.42851732, 0.38093079, 0.33728273, 0.29744544]
                               ])

rHeston_skew_optimized = np.array([[3.62695003, 3.53218254, 3.39172541, 3.20706184, 2.98586125,
                                    2.73949611, 2.48023301, 2.21912229, 1.96481527, 1.72343779,
                                    1.49881935, 1.29303526, 1.10693513, 0.94052227, 0.79329579,
                                    0.66438475, 0.55267468, 0.45683556, 0.3754223, 0.30690132,
                                    0.24972093, 0.20237058, 0.16342663, 0.13158646, 0.10568649],
                                   [3.63426906, 3.3372045, 3.08734618, 2.8723589, 2.68047573,
                                    2.50090534, 2.3247281, 2.14619108, 1.96331094, 1.77759002,
                                    1.59267659, 1.41280947, 1.24168953, 1.08197346, 0.9352485,
                                    0.80222386, 0.68300391, 0.57728441, 0.48448089, 0.40383843,
                                    0.33446256, 0.27536003, 0.22547801, 0.18374217, 0.14909761],
                                   [4.32431073, 3.84545134, 3.41744353, 3.0414489, 2.71551581,
                                    2.43565437, 2.19650471, 1.99186851, 1.81511233, 1.65953427,
                                    1.51880286, 1.3875111, 1.261776, 1.13961872, 1.02085478,
                                    0.90651579, 0.79805795, 0.69679194, 0.60360238, 0.51892745,
                                    0.44284088, 0.37517686, 0.31560256, 0.2636729, 0.21885156],
                                   [4.36039626, 3.98111993, 3.61003878, 3.2524446, 2.91510357,
                                    2.60395076, 2.32282252, 2.07309481, 1.85407219, 1.66345391,
                                    1.49787217, 1.35331155, 1.22548484, 1.11023017, 1.00394499,
                                    0.90402197, 0.80904086, 0.7186913, 0.63338046, 0.55376265,
                                    0.48039846, 0.41360962, 0.35347204, 0.29988049, 0.25259898],
                                   [4.16026172, 3.80343975, 3.482938, 3.18763734, 2.90925,
                                    2.6432352, 2.38879768, 2.14784177, 1.923389, 1.71808945,
                                    1.53345801, 1.3695919, 1.2253558, 1.09870963, 0.98707727,
                                    0.88764575, 0.79771389, 0.71501257, 0.63795771, 0.5657311,
                                    0.49814402, 0.43536108, 0.37762821, 0.32510662, 0.27782262],
                                   [4.24138429, 3.81718452, 3.44564956, 3.12073879, 2.83480126,
                                    2.5796535, 2.3476227, 2.13254795, 1.93053111, 1.74011771,
                                    1.56176617, 1.39681249, 1.24654862, 1.11155181, 0.99152044,
                                    0.88534595, 0.79137426, 0.7076722, 0.6322984, 0.56355524,
                                    0.50018535, 0.44144585, 0.38703621, 0.3369225, 0.29115523],
                                   [4.35314395, 3.93646686, 3.5466721, 3.18803002, 2.86366463,
                                    2.57441462, 2.31872233, 2.09309079, 1.89293349, 1.71330654,
                                    1.54967177, 1.39855228, 1.25790232, 1.12704783, 1.00623737,
                                    0.89597441, 0.79653015, 0.7076875, 0.62873343, 0.55858924,
                                    0.49599676, 0.43970473, 0.38863292, 0.34197977, 0.29924595],
                                   [4.31538224, 3.92405822, 3.55655152, 3.21214954, 2.89268849,
                                    2.60060964, 2.33735751, 2.10261029, 1.89424164, 1.70891339,
                                    1.54271308, 1.39187615, 1.25338347, 1.12532184, 1.00690764,
                                    0.89809944, 0.7991091, 0.70996619, 0.63030604, 0.55936815,
                                    0.49612056, 0.43943307, 0.38824627, 0.34170215, 0.29920659],
                                   [4.28185756, 3.89518641, 3.53966995, 3.20918409, 2.90094129,
                                    2.61488288, 2.35228943, 2.11428494, 1.9008484, 1.71048427,
                                    1.54058931, 1.38797753, 1.24953294, 1.12273839, 1.00600223,
                                    0.89860653, 0.80041447, 0.71143704, 0.63149417, 0.56006973,
                                    0.49634303, 0.43932016, 0.38799589, 0.34149653, 0.29916751],
                                   [4.27834875, 3.87515066, 3.51453222, 3.18901415, 2.89159562,
                                    2.61701623, 2.36237288, 2.12689858, 1.91105737, 1.71536319,
                                    1.53963012, 1.38262767, 1.24228437, 1.11612376, 1.00178041,
                                    0.89735839, 0.80165117, 0.7140688, 0.63437577, 0.56238112,
                                    0.4977249, 0.43982083, 0.38792079, 0.34123727, 0.29906165]
                                   ])

rHeston_skew_european = np.array([[3.62695003, 3.53218254, 3.39172541, 3.20706184, 2.98586125,
                                   2.73949611, 2.48023301, 2.21912229, 1.96481527, 1.72343779,
                                   1.49881935, 1.29303526, 1.10693513, 0.94052227, 0.79329579,
                                   0.66438475, 0.55267468, 0.45683556, 0.3754223, 0.30690132,
                                   0.24972093, 0.20237058, 0.16342663, 0.13158646, 0.10568649],
                                  [4.15438993, 3.91089896, 3.63096114, 3.32967007, 3.02211547,
                                   2.72112575, 2.43625188, 2.17371545, 1.93681839, 1.7266678,
                                   1.54273748, 1.38337325, 1.24613895, 1.12805227, 1.02578088,
                                   0.93585081, 0.8549101, 0.78004979, 0.70916405, 0.64112586,
                                   0.57573449, 0.51338771, 0.45467274, 0.40007763, 0.34987039],
                                  [4.52444297, 4.08975325, 3.67443005, 3.28898478, 2.93916776,
                                   2.62687391, 2.35110097, 2.1089621, 1.89634367, 1.70852772,
                                   1.54077576, 1.38891396, 1.24982717, 1.12169475, 1.00385305,
                                   0.89634197, 0.79935363, 0.71283984, 0.63630951, 0.56886123,
                                   0.5093029, 0.45631349, 0.40861099, 0.36510876, 0.32502125],
                                  [4.3544635, 3.9046367, 3.50981781, 3.16392027, 2.8594638,
                                   2.58872411, 2.34460886, 2.12153357, 1.91591229, 1.72607663,
                                   1.55163567, 1.39258668, 1.24860423, 1.11875311, 1.00160917,
                                   0.8956259, 0.79945499, 0.7121609, 0.63320288, 0.56225581,
                                   0.49898884, 0.44291182, 0.3933355, 0.34942398, 0.310295],
                                  [4.27838326, 3.88741985, 3.52897341, 3.19773941, 2.89150921,
                                   2.60997605, 2.35325924, 2.12072314, 1.91072873, 1.72088067,
                                   1.54866669, 1.3919797, 1.24931392, 1.11961882, 1.00202452,
                                   0.8955839, 0.79927273, 0.71210165, 0.63322914, 0.56196871,
                                   0.49770392, 0.43979505, 0.38755685, 0.34031102, 0.29747142],
                                  [4.31038592, 3.89864208, 3.52541887, 3.18812208, 2.88288752,
                                   2.60562327, 2.35291481, 2.12236869, 1.91237836, 1.72160912,
                                   1.5485589, 1.3915824, 1.24904688, 1.11958864, 1.00210038,
                                   0.89563697, 0.79927547, 0.71209188, 0.63323218, 0.56197117,
                                   0.4976917, 0.43980779, 0.38770173, 0.34072937, 0.29828181],
                                  [4.30161505, 3.89732749, 3.52845975, 3.19160077, 2.88450685,
                                   2.60530094, 2.35185501, 2.12170996, 1.91243153, 1.72198703,
                                   1.54877594, 1.39150158, 1.24886837, 1.11952288, 1.00218359,
                                   0.89573756, 0.79928223, 0.71202335, 0.63318372, 0.56199095,
                                   0.49773412, 0.4398084, 0.38769971, 0.34092659, 0.29899151],
                                  [4.30289662, 3.89717573, 3.52778521, 3.19109974, 2.88437905,
                                   2.60540773, 2.35199174, 2.12177321, 1.91243611, 1.7219523,
                                   1.5487519, 1.39149639, 1.24887532, 1.11953062, 1.00218588,
                                   0.89573531, 0.79927894, 0.71202189, 0.6331846, 0.5619925,
                                   0.49773469, 0.43980799, 0.38769926, 0.34092659, 0.29899165],
                                  [4.30313131, 3.89732134, 3.52779892, 3.19103701, 2.8843166,
                                   2.60538573, 2.35200789, 2.12179995, 1.91244894, 1.72194617,
                                   1.54873843, 1.39148957, 1.24887821, 1.1195381, 1.00219002,
                                   0.89573408, 0.79927529, 0.7120201, 0.63318532, 0.56199419,
                                   0.49773539, 0.43980748, 0.38769871, 0.34092659, 0.2989918],
                                  [4.30328547, 3.89754898, 3.52788941, 3.19095473, 2.88417863,
                                   2.60532294, 2.35205174, 2.1218812, 1.91248653, 1.72192207,
                                   1.54869145, 1.39146685, 1.24889065, 1.11956286, 1.00220198,
                                   0.89572752, 0.79926232, 0.71201391, 0.63318851, 0.562,
                                   0.49773769, 0.43980563, 0.38769632, 0.34092667, 0.29899238]
                                  ])

'''
Rough Heston prices for geometric Asian call options. Parameters are 
T, H, lambda_, rho, nu, theta, V_0, rel_tol = 1., 0.1, 0.3, -0.7, 0.3, 0.02, 0.02, 1e-05
K = np.exp(np.linspace(-1, 0.5, 301))
'''

rHeston_prices_geom_asian = np.array([6.29914798e-01, 6.28070901e-01, 6.26217765e-01, 6.24355345e-01,
                                      6.22483595e-01, 6.20602467e-01, 6.18711915e-01, 6.16811892e-01,
                                      6.14902351e-01, 6.12983244e-01, 6.11054524e-01, 6.09116142e-01,
                                      6.07168051e-01, 6.05210202e-01, 6.03242546e-01, 6.01265035e-01,
                                      5.99277620e-01, 5.97280252e-01, 5.95272880e-01, 5.93255455e-01,
                                      5.91227928e-01, 5.89190248e-01, 5.87142364e-01, 5.85084226e-01,
                                      5.83015783e-01, 5.80936984e-01, 5.78847778e-01, 5.76748113e-01,
                                      5.74637936e-01, 5.72517197e-01, 5.70385843e-01, 5.68243821e-01,
                                      5.66091078e-01, 5.63927562e-01, 5.61753220e-01, 5.59567997e-01,
                                      5.57371841e-01, 5.55164697e-01, 5.52946511e-01, 5.50717230e-01,
                                      5.48476797e-01, 5.46225160e-01, 5.43962261e-01, 5.41688048e-01,
                                      5.39402463e-01, 5.37105451e-01, 5.34796956e-01, 5.32476923e-01,
                                      5.30145295e-01, 5.27802015e-01, 5.25447026e-01, 5.23080273e-01,
                                      5.20701696e-01, 5.18311240e-01, 5.15908847e-01, 5.13494459e-01,
                                      5.11068018e-01, 5.08629465e-01, 5.06178744e-01, 5.03715794e-01,
                                      5.01240558e-01, 4.98752977e-01, 4.96252991e-01, 4.93740542e-01,
                                      4.91215571e-01, 4.88678018e-01, 4.86127823e-01, 4.83564927e-01,
                                      4.80989270e-01, 4.78400792e-01, 4.75799433e-01, 4.73185133e-01,
                                      4.70557832e-01, 4.67917469e-01, 4.65263985e-01, 4.62597318e-01,
                                      4.59917409e-01, 4.57224197e-01, 4.54517621e-01, 4.51797622e-01,
                                      4.49064138e-01, 4.46317109e-01, 4.43556475e-01, 4.40782176e-01,
                                      4.37994151e-01, 4.35192341e-01, 4.32376685e-01, 4.29547123e-01,
                                      4.26703596e-01, 4.23846045e-01, 4.20974410e-01, 4.18088632e-01,
                                      4.15188653e-01, 4.12274415e-01, 4.09345858e-01, 4.06402927e-01,
                                      4.03445563e-01, 4.00473709e-01, 3.97487311e-01, 3.94486311e-01,
                                      3.91470655e-01, 3.88440288e-01, 3.85395157e-01, 3.82335208e-01,
                                      3.79260390e-01, 3.76170651e-01, 3.73065941e-01, 3.69946210e-01,
                                      3.66811411e-01, 3.63661495e-01, 3.60496416e-01, 3.57316132e-01,
                                      3.54120597e-01, 3.50909770e-01, 3.47683612e-01, 3.44442084e-01,
                                      3.41185149e-01, 3.37912772e-01, 3.34624922e-01, 3.31321567e-01,
                                      3.28002680e-01, 3.24668236e-01, 3.21318211e-01, 3.17952586e-01,
                                      3.14571343e-01, 3.11174469e-01, 3.07761955e-01, 3.04333792e-01,
                                      3.00889978e-01, 2.97430515e-01, 2.93955409e-01, 2.90464669e-01,
                                      2.86958312e-01, 2.83436357e-01, 2.79898832e-01, 2.76345769e-01,
                                      2.72777205e-01, 2.69193188e-01, 2.65593768e-01, 2.61979007e-01,
                                      2.58348974e-01, 2.54703744e-01, 2.51043405e-01, 2.47368054e-01,
                                      2.43677796e-01, 2.39972751e-01, 2.36253047e-01, 2.32518829e-01,
                                      2.28770252e-01, 2.25007488e-01, 2.21230723e-01, 2.17440160e-01,
                                      2.13636020e-01, 2.09818543e-01, 2.05987990e-01, 2.02144641e-01,
                                      1.98288802e-01, 1.94420803e-01, 1.90541000e-01, 1.86649779e-01,
                                      1.82747555e-01, 1.78834777e-01, 1.74911930e-01, 1.70979534e-01,
                                      1.67038154e-01, 1.63088396e-01, 1.59130914e-01, 1.55166414e-01,
                                      1.51195655e-01, 1.47219458e-01, 1.43238707e-01, 1.39254354e-01,
                                      1.35267427e-01, 1.31279036e-01, 1.27290378e-01, 1.23302743e-01,
                                      1.19317529e-01, 1.15336241e-01, 1.11360510e-01, 1.07392097e-01,
                                      1.03432906e-01, 9.94850010e-02, 9.55506127e-02, 9.16321591e-02,
                                      8.77322603e-02, 8.38537559e-02, 7.99997253e-02, 7.61735082e-02,
                                      7.23787278e-02, 6.86193141e-02, 6.48995304e-02, 6.12239989e-02,
                                      5.75977281e-02, 5.40261401e-02, 5.05150954e-02, 4.70709161e-02,
                                      4.37004031e-02, 4.04108455e-02, 3.72100171e-02, 3.41061550e-02,
                                      3.11079141e-02, 2.82242871e-02, 2.54644821e-02, 2.28377466e-02,
                                      2.03531271e-02, 1.80191597e-02, 1.58434892e-02, 1.38324300e-02,
                                      1.19904948e-02, 1.03199367e-02, 8.82036767e-03, 7.48852289e-03,
                                      6.31823303e-03, 5.30063772e-03, 4.42463062e-03, 3.67747987e-03,
                                      3.04553492e-03, 2.51492185e-03, 2.07214520e-03, 1.70454622e-03,
                                      1.40060240e-03, 1.15008070e-03, 9.44073193e-04, 7.74948780e-04,
                                      6.36252767e-04, 5.22579436e-04, 4.29436080e-04, 3.53110362e-04,
                                      2.90547927e-04, 2.39243553e-04, 1.97146843e-04, 1.62582003e-04,
                                      1.34180521e-04, 1.10825227e-04, 9.16041404e-05, 7.57725926e-05,
                                      6.27222518e-05, 5.19558591e-05, 4.30666559e-05, 3.57216482e-05,
                                      2.96479984e-05, 2.46219614e-05, 2.04598868e-05, 1.70108979e-05,
                                      1.41509321e-05, 1.17778851e-05, 9.80765089e-06, 8.17089088e-06,
                                      6.81039331e-06, 5.67891459e-06, 4.73741218e-06, 3.95359672e-06,
                                      3.30074461e-06, 2.75672318e-06, 2.30318963e-06, 1.92493233e-06,
                                      1.60932841e-06, 1.34589695e-06, 1.12593056e-06, 9.42191233e-07,
                                      7.88659236e-07, 6.60325490e-07, 5.53019860e-07, 4.63269020e-07,
                                      3.88178710e-07, 3.25336155e-07, 2.72729129e-07, 2.28678785e-07,
                                      1.91783886e-07, 1.60874466e-07, 1.34973314e-07, 1.13263933e-07,
                                      9.50638898e-08, 7.98026167e-08, 6.70029309e-08, 5.62656319e-08,
                                      4.72566630e-08, 3.96964035e-08, 3.33507373e-08, 2.80235967e-08,
                                      2.35507390e-08])

'''
Rough Heston prices for call options on the average volatility. Parameters are
T, H, lambda_, nu, theta, V_0, rel_tol = 1., 0.1, 0.3, 0.3, 0.02, 0.02, 1e-05
The expected average volatility was computed as
E_V = rHestonFourier.solve_fractional_Riccati(F=lambda t, x: np.array([0.02 + 0.3 * 0.02 - 0.3 * x]), T=1., 
N_Riccati=10000, H=0.1) + 0.02
avg_vol = np.trapz(np.real(E_V), dx=1 / 10000)
The vector of strikes used was
K = avg_vol * np.exp(np.linspace(-1., 0.5, 301))
'''

rHeston_prices_avg_vol = np.array([0.01727425, 0.01723369, 0.01719306, 0.01715234, 0.01711156,
                                   0.0170707, 0.01702976, 0.01698876, 0.01694768, 0.01690653,
                                   0.0168653, 0.01682401, 0.01678264, 0.01674121, 0.0166997,
                                   0.01665812, 0.01661648, 0.01657476, 0.01653298, 0.01649113,
                                   0.01644921, 0.01640722, 0.01636517, 0.01632305, 0.01628086,
                                   0.01623861, 0.01619629, 0.01615391, 0.01611146, 0.01606895,
                                   0.01602638, 0.01598374, 0.01594104, 0.01589828, 0.01585545,
                                   0.01581257, 0.01576962, 0.01572662, 0.01568355, 0.01564043,
                                   0.01559725, 0.01555401, 0.01551071, 0.01546735, 0.01542394,
                                   0.01538048, 0.01533695, 0.01529338, 0.01524975, 0.01520606,
                                   0.01516232, 0.01511853, 0.01507469, 0.0150308, 0.01498685,
                                   0.01494285, 0.0148988, 0.01485471, 0.01481056, 0.01476637,
                                   0.01472212, 0.01467783, 0.01463349, 0.01458911, 0.01454468,
                                   0.0145002, 0.01445568, 0.01441112, 0.01436651, 0.01432186,
                                   0.01427717, 0.01423244, 0.01418767, 0.01414285, 0.014098,
                                   0.01405311, 0.01400817, 0.01396321, 0.0139182, 0.01387316,
                                   0.01382808, 0.01378297, 0.01373782, 0.01369263, 0.01364742,
                                   0.01360217, 0.01355688, 0.01351157, 0.01346622, 0.01342085,
                                   0.01337544, 0.01333001, 0.01328454, 0.01323905, 0.01319353,
                                   0.01314799, 0.01310242, 0.01305682, 0.0130112, 0.01296556,
                                   0.01291989, 0.01287421, 0.0128285, 0.01278277, 0.01273702,
                                   0.01269125, 0.01264546, 0.01259965, 0.01255383, 0.01250798,
                                   0.01246213, 0.01241625, 0.01237036, 0.01232446, 0.01227854,
                                   0.01223261, 0.01218667, 0.01214072, 0.01209476, 0.01204879,
                                   0.01200281, 0.01195682, 0.01191083, 0.01186482, 0.01181882,
                                   0.0117728, 0.01172679, 0.01168077, 0.01163474, 0.01158872,
                                   0.01154269, 0.01149666, 0.01145063, 0.01140461, 0.01135858,
                                   0.01131255, 0.01126653, 0.01122052, 0.0111745, 0.0111285,
                                   0.01108249, 0.0110365, 0.01099052, 0.01094454, 0.01089857,
                                   0.01085262, 0.01080667, 0.01076074, 0.01071481, 0.0106689,
                                   0.01062301, 0.01057713, 0.01053126, 0.01048542, 0.01043958,
                                   0.01039377, 0.01034797, 0.0103022, 0.01025645, 0.01021071,
                                   0.010165, 0.01011931, 0.01007365, 0.01002801, 0.0099824,
                                   0.00993681, 0.00989125, 0.00984572, 0.00980022, 0.00975474,
                                   0.0097093, 0.00966388, 0.0096185, 0.00957315, 0.00952783,
                                   0.00948255, 0.00943731, 0.0093921, 0.00934692, 0.00930179,
                                   0.00925669, 0.00921164, 0.00916662, 0.00912165, 0.00907671,
                                   0.00903182, 0.00898697, 0.00894217, 0.00889741, 0.0088527,
                                   0.00880803, 0.00876341, 0.00871884, 0.00867432, 0.00862986,
                                   0.00858544, 0.00854107, 0.00849676, 0.0084525, 0.0084083,
                                   0.00836415, 0.00832005, 0.00827601, 0.00823203, 0.00818811,
                                   0.00814425, 0.00810045, 0.00805671, 0.00801303, 0.00796942,
                                   0.00792587, 0.00788238, 0.00783896, 0.00779561, 0.00775232,
                                   0.0077091, 0.00766595, 0.00762286, 0.00757985, 0.00753691,
                                   0.00749404, 0.00745125, 0.00740853, 0.00736588, 0.00732331,
                                   0.00728081, 0.00723839, 0.00719605, 0.00715379, 0.00711161,
                                   0.0070695, 0.00702748, 0.00698554, 0.00694368, 0.00690191,
                                   0.00686022, 0.00681862, 0.0067771, 0.00673567, 0.00669433,
                                   0.00665307, 0.0066119, 0.00657083, 0.00652984, 0.00648894,
                                   0.00644814, 0.00640744, 0.00636682, 0.0063263, 0.00628588,
                                   0.00624555, 0.00620532, 0.00616518, 0.00612515, 0.00608521,
                                   0.00604538, 0.00600564, 0.00596601, 0.00592648, 0.00588705,
                                   0.00584773, 0.00580851, 0.0057694, 0.00573039, 0.00569149,
                                   0.00565269, 0.00561401, 0.00557543, 0.00553697, 0.00549861,
                                   0.00546037, 0.00542224, 0.00538422, 0.00534631, 0.00530852,
                                   0.00527084, 0.00523328, 0.00519583, 0.00515851, 0.00512129,
                                   0.0050842, 0.00504723, 0.00501037, 0.00497364, 0.00493702,
                                   0.00490053, 0.00486416, 0.00482791, 0.00479179, 0.00475579,
                                   0.00471991, 0.00468416, 0.00464854, 0.00461304, 0.00457767,
                                   0.00454243, 0.00450731, 0.00447233, 0.00443748, 0.00440275,
                                   0.00436816])

'''
Below is a lot of code for the L^1 weak approximations

skew_0001 = np.array([6.21212249, 5.52405556, 4.91076073, 4.36412991, 3.87693626,
                      3.44273759, 3.05579307, 2.7109843 , 2.40375131, 2.1300291 ,
                      1.88619596, 1.66902288, 1.47563335, 1.30346448, 1.15023122,
                      1.01389775, 0.89264985, 0.78487072, 0.68911878, 0.60410872,
                      0.5286913 , 0.46185115, 0.40267134, 0.3503366 , 0.30411815])
skew_001 = np.array([6.050387  , 5.38621306, 4.7935284 , 4.26465543, 3.79273883,
       3.37166521, 2.99598002, 2.6608136 , 2.36182268, 2.09513107,
       1.85728112, 1.64518807, 1.45609919, 1.28755972, 1.13737913,
       1.00360325, 0.88448877, 0.77848014, 0.68418926, 0.60037323,
       0.52593449, 0.45988018, 0.4013273 , 0.34948626, 0.30364783])
skew_01 = np.array([4.30361564, 3.89721572, 3.52730445, 3.19065982, 2.88434347,
       2.60567634, 2.35221558, 2.1217331 , 1.91220006, 1.72176641,
       1.54874681, 1.39161486, 1.24895314, 1.1194989 , 1.00209233,
       0.89567835, 0.79928972, 0.71206405, 0.63319765, 0.56196367,
       0.49769919, 0.43979926, 0.3877107 , 0.34092708, 0.29898438])


for i in range(len(H)):
    tic = time.perf_counter()
    skew = rHestonFourier.skew_eur_call_put(H=H[i], lambda_=lambda_, rho=rho, nu=nu, theta=theta, V_0=V_0, T=T, verbose=4, rel_tol=rel_tol)
    np.save(f'rHeston skew eur call standard params H={H[i]} T=(0.004, 1, 25) logspaced.npy', skew)
    print(time.perf_counter() - tic)
    print((skew,))
plt.loglog(T, skew)
plt.show()

for i in range(len(H)):
    tic = time.perf_counter()
    true_smile = rHestonFourier.eur_call_put(digital=True, lambda_=lambda_, rho=rho, nu=nu, theta=theta, V_0=V_0,
                                                  S_0=S_0, T=T, H=H[i], K=K, rel_tol=rel_tol, verbose=5,
                                             implied_vol=False)
    np.save(f'rHeston prices digital eur call standard params H={H[i]} T=1 k=(-1, 0.5, 301).npy', true_smile)
    print(time.perf_counter() - tic)
print('Finished')
time.sleep(360000)

N_smile = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 16, 32, 64, 128])
errors_smile = np.empty((len(modes), len(H), len(N_smile)))
errors_smile[0, 0, :] = np.array([0.1829, 0.1155, 0.08704, 0.07066, 0.07599, 0.03161, 0.01965, 0.01898, 0.01932,
                                  0.01263, 0.005823, 0.0006030, np.nan, np.nan])
errors_smile[0, 1, :] = np.array([0.1746, 0.1106, 0.08365, 0.06806, 0.07168, 0.02973, 0.01853, 0.01785, 0.01814,
                                  0.01187, 0.005393, np.nan, np.nan, np.nan])
errors_smile[0, 2, :] = np.array([0.1343, 0.08288, 0.06017, 0.04405, 0.05058, 0.02121, 0.01371, 0.01245, 0.01206,
                                  0.008041, 0.003168, np.nan, np.nan, np.nan])
errors_smile[1, 0, :] = np.array([0.1938, 0.1416, 0.1575, 0.1316, 0.1074, 0.1083, 0.07282, 0.07282, 0.07282, 0.04476,
                                  0.02396, 0.002269, np.nan, np.nan])
errors_smile[1, 1, :] = np.array([0.1850, 0.1359, 0.1514, 0.1263, 0.1033, 0.1043, 0.06962, 0.06962, 0.06962, 0.04283,
                                  0.02280, np.nan, np.nan, np.nan])
errors_smile[1, 2, :] = np.array([0.1477, 0.1067, 0.1231, 0.09812, 0.06501, 0.09107, 0.05525, 0.05525, 0.05525, 0.03414,
                                  0.01769, np.nan, np.nan, np.nan])
errors_smile[2, 0, :] = np.array([0.08538, 0.02818, 0.01147, 0.005254, 0.002617, 0.001383, 0.0007650, 0.0004390,
                                  0.0002604, 0.0001227, np.nan, np.nan, np.nan, np.nan])
errors_smile[2, 1, :] = np.array([0.08398, 0.02640, 0.01066, 0.004837, 0.002280, 0.001252, 0.0005839, 0.0003911,
                                  0.0001781, 0.00009751, np.nan, np.nan, np.nan, np.nan])
errors_smile[2, 2, :] = np.array([0.07348, 0.02050, 0.007378, 0.003057, 0.001399, 0.0006876, 0.0002882, 0.0001918,
                                  0.00008087, 0.00003976, np.nan, np.nan, np.nan, np.nan])
errors_smile[3, 0, :] = np.array([0.1051, 0.1051, 0.1051, 0.1051, 0.1051, 0.1051, 0.1051, 0.1051, 0.1051, 0.1051,
                                  0.1049, 0.1018, np.nan, np.nan])
errors_smile[3, 1, :] = np.array([0.1059, 0.1059, 0.1059, 0.1057, 0.1048, 0.1030, 0.1001, 0.09630, 0.09177, 0.08676,
                                  0.05559, np.nan, np.nan, np.nan])
errors_smile[3, 2, :] = np.array([0.09957, 0.09904, 0.08498, 0.05636, 0.03110, 0.01620, 0.01132, 0.01207, 0.01391,
                                  0.01479, 0.007538, np.nan, np.nan, np.nan])
errors_smile[4, 0, :] = np.array([0.08315, 0.07133, 0.06394, 0.05848, 0.05395, 0.05051, 0.04740, 0.04469, 0.04228,
                                  0.04010, 0.06394, np.nan, np.nan, np.nan])
errors_smile[4, 1, :] = np.array([0.04000, 0.02559, 0.01816, 0.01362, 0.01039, 0.008078, 0.007067, 0.007123, 0.007065,
                                  0.006933, 0.005549, np.nan, np.nan, np.nan])
errors_smile[4, 2, :] = np.array([0.008936, 0.006503, 0.005534, 0.004271, 0.003193, 0.002359, 0.001735, 0.001276,
                                  0.0009414, 0.0006972, 0.0001289, np.nan, np.nan, np.nan])
errors_smile[5, 0, :] = np.array([0.08315, 0.002227, 0.001009, 0.00007388, 0.00001411, 0.000002441, 0.000002527,
                                  0.000002203, 0.000002100, 0.000002111, 0.005265, np.nan, np.nan, np.nan])
errors_smile[5, 1, :] = np.array([0.04000, 0.004305, 0.0009287, 0.00007170, 0.00001559, 0.000006044, 0.000004745,
                                  0.000004040, 0.000003861, 0.000003813, 0.000004016, np.nan, np.nan, np.nan])
errors_smile[5, 2, :] = np.array([0.008936, 0.004424, 0.0006565, 0.00004705, 0.000006326, 0.000001694, 0.0000009140,
                                  0.000001674, 0.000001204, 0.0000009833, 0.0000007366, np.nan, np.nan, np.nan])
errors_smile[6, 0, :] = np.array([0.3140, 0.2507, 0.2156, 0.1928, 0.1765, 0.1641, 0.1543, 0.1463, 0.1395, 0.1338,
                                  0.1114, np.nan, np.nan, np.nan])
errors_smile[6, 1, :] = np.array([0.3009, 0.2404, 0.2102, 0.1894, 0.1741, 0.1621, 0.1523, 0.1442, 0.1373, 0.1314,
                                  0.1076, np.nan, np.nan, np.nan])
errors_smile[6, 2, :] = np.array([0.2436, 0.2007, 0.1760, 0.1592, 0.1467, 0.1368, 0.1288, 0.1221, 0.1164, 0.1115,
                                  0.09160, np.nan, np.nan, np.nan])
errors_smile[7, 0, :] = np.array([1., 0.08138, 0.08138, 0.2438, 0.2438, 0.2950, 0.2950, 0.3127, 0.3127, 0.3054,
                                  0.3143, np.nan, np.nan, np.nan])
errors_smile[7, 1, :] = np.array([1., 0.05366, 0.05366, 0.09091, 0.09091, 0.07631, 0.07631, 0.06857, 0.06857, 0.05470,
                                  0.03045, np.nan, np.nan, np.nan])
errors_smile[7, 2, :] = np.array([1., 0.01112, 0.01112, 0.02004, 0.02004, 0.01659, 0.01659, 0.009991, 0.009991,
                                  0.005032, 0.002500, np.nan, np.nan, np.nan])

errors_surface = np.empty((8, 3, 10))
errors_surface[0, 0, :] = np.array([0.2671, 0.1734, 0.1512, 0.1226, 0.1243, 0.08618, 0.07406, 0.05997, 0.05077, 0.03829])
errors_surface[0, 1, :] = np.array([0.2627, 0.1727, 0.1513, 0.1231, 0.1231, 0.08671, 0.07487, 0.06047, 0.05102, 0.03852])
errors_surface[0, 2, :] = np.array([0.2142, 0.1558, 0.1422, 0.1227, 0.1167, 0.08732, 0.07845, 0.06253, 0.05148, 0.03940])
errors_surface[1, 0, :] = np.array([0.2943, 0.1635, 0.1287, 0.09995, 0.08213, 0.1190, 0.06733, 0.06733, 0.06733, 0.03557])
errors_surface[1, 1, :] = np.array([0.2895, 0.1584, 0.1247, 0.09702, 0.07992, 0.1172, 0.06624, 0.06624, 0.06624, 0.03413])
errors_surface[1, 2, :] = np.array([0.2368, 0.1363, 0.1109, 0.08611, 0.1972, 0.09581, 0.05410, 0.05410, 0.05410, 0.02831])
errors_surface[2, 0, :] = np.array([0.1954, 0.08027, 0.03203, 0.01583, 0.009003, 0.005313, 0.003383, 0.001956, 0.001167,
                            0.0005538])
errors_surface[2, 1, :] = np.array([0.1933, 0.08020, 0.03161, 0.01552, 0.008376, 0.005155, 0.002769, 0.001885, 0.0008742,
                            0.0004845])
errors_surface[2, 2, :] = np.array([0.1653, 0.07787, 0.02632, 0.01233, 0.006758, 0.003720, 0.001884, 0.001264, 0.0005309,
                            0.0002581])
errors_surface[3, 0, :] = np.array([0.2726, 0.3082, 0.3616, 0.3856, 0.4079, 0.4245, 0.4475, 0.4475, 0.4475, 0.4474])
errors_surface[3, 1, :] = np.array([0.2698, 0.3049, 0.3573, 0.3789, 0.3906, 0.3820, 0.3574, 0.3230, 0.2834, 0.2422])
errors_surface[3, 2, :] = np.array([0.2331, 0.2597, 0.2062, 0.09044, 0.06149, 0.07431, 0.06183, 0.04812, 0.04128, 0.03942])
errors_surface[4, 0, :] = np.array([0.2378, 0.1904, 0.1452, 0.1188, 0.1455, 0.1252, 0.1600, 0.1602, 0.1600, 0.1596])
errors_surface[4, 1, :] = np.array([0.1977, 0.1613, 0.1096, 0.08941, 0.09913, 0.09864, 0.1056, 0.09607, 0.08691, 0.07817])
errors_surface[4, 2, :] = np.array([0.1775, 0.1330, 0.06808, 0.03679, 0.01505, 0.006230, 0.004136, 0.002843, 0.002889,
                            0.002282])
errors_surface[5, 0, :] = np.array([0.2378, 0.04223, 0.009478, 0.01044, 0.002738, 0.0005558, 0.0001236, 0.00001813, 0.00001460,
                            0.000009947])
errors_surface[5, 1, :] = np.array([0.1977, 0.02710, 0.009116, 0.008241, 0.002668, 0.0001901, 0.0001916, 0.00006338, 0.00001990,
                            0.000006955])
errors_surface[5, 2, :] = np.array([0.1775, 0.06111, 0.01012, 0.008072, 0.001943, 0.0003600, 0.00008426, 0.00002153,
                            0.000003113, 0.000002971])
errors_surface[6, 0, :] = np.array([0.4062, 0.3877, 0.4045, 0.4074, 0.4142, 0.4194, 0.4336, 0.4260, 0.4192, 0.4129])
errors_surface[6, 1, :] = np.array([0.4006, 0.3823, 0.3990, 0.4019, 0.4086, 0.4137, 0.4278, 0.4203, 0.4135, 0.4073])
errors_surface[6, 2, :] = np.array([0.3385, 0.3223, 0.3371, 0.3307, 0.3457, 0.3503, 0.3631, 0.3562, 0.3501, 0.3445])
errors_surface[7, 0, :] = np.array([1., 0.1702, 0.1910, 0.2445, 0.2641, 0.2659, 0.2698, 0.2656, 0.2656, 0.2656])
errors_surface[7, 1, :] = np.array([1., 0.1369, 0.1469, 0.1537, 0.1566, 0.1549, 0.1598, 0.1418, 0.1418, 0.1290])
errors_surface[7, 2, :] = np.array([1., 0.03945, 0.04089, 0.02426, 0.02153, 0.01218, 0.01473, 0.01197, 0.01197, 0.009941])

errors_skew = np.empty((8, 3, 10))
errors_skew[0, 0, :] = np.array([0.6281, 0.4965, 0.4558, 0.4080, 0.4057, 0.3406, 0.3468, 0.2653, 0.2097, 0.1637])
errors_skew[0, 1, :] = np.array([0.6314, 0.5007, 0.4666, 0.4206, 0.4189, 0.3549, 0.3625, 0.2785, 0.2195, 0.1710])
errors_skew[0, 2, :] = np.array([0.6658, 0.5413, 0.5239, 0.5022, 0.5015, 0.4581, 0.4736, 0.3969, 0.3266, 0.2602])
errors_skew[1, 0, :] = np.array([0.6568, 0.4865, 0.3610, 0.2514, 0.2039, 0.4286, 0.2760, 0.2760, 0.2760, 0.1274])
errors_skew[1, 1, :] = np.array([0.6557, 0.4928, 0.3669, 0.2568, 0.2086, 0.4322, 0.2794, 0.2794, 0.2794, 0.1286])
errors_skew[1, 2, :] = np.array([0.6238, 0.5259, 0.4041, 0.2989, 0.6589, 0.4424, 0.3032, 0.3032, 0.3032, 0.1370])
errors_skew[2, 0, :] = np.array([0.5386, 0.3443, 0.1395, 0.06123, 0.03103, 0.02197, 0.01494, 0.009043, 0.004978,
                                 0.002309])
errors_skew[2, 1, :] = np.array([0.5425, 0.3472, 0.1398, 0.06100, 0.02960, 0.02206, 0.01229, 0.009011, 0.003919, 0.002099])
errors_skew[2, 2, :] = np.array([0.5784, 0.3709, 0.1409, 0.06287, 0.03566, 0.02153, 0.01355, 0.008213, 0.003442, 0.001881])
errors_skew[3, 0, :] = np.array([0.6330, 0.7267, 0.8299, 0.8652, 0.8931, 0.9111, 0.9326, 0.9325, 0.9324, 0.9322])
errors_skew[3, 1, :] = np.array([0.6354, 0.7268, 0.8280, 0.8561, 0.8476, 0.7747, 0.6825, 0.5963, 0.5176, 0.4488])
errors_skew[3, 2, :] = np.array([0.6298, 0.6974, 0.4783, 0.2126, 0.2893, 0.2087, 0.1534, 0.1612, 0.1336, 0.1091])
errors_skew[4, 0, :] = np.array([0.6964, 0.6005, 0.4239, 0.3763, 0.5524, 0.4648, 0.5973, 0.5808, 0.5643, 0.5478])
errors_skew[4, 1, :] = np.array([0.6507, 0.5371, 0.3431, 0.3215, 0.2737, 0.2319, 0.1979, 0.1736, 0.1533, 0.1365])
errors_skew[4, 2, :] = np.array([0.6465, 0.5013, 0.2680, 0.1551, 0.05940, 0.02618, 0.01424, 0.009396, 0.006557, 0.006901])
errors_skew[5, 0, :] = np.array([0.6964, 0.2493, 0.04381, 0.06475, 0.02578, 0.003323, 0.002775, 0.0009356, 0.0004261,
                                 0.0001619])
errors_skew[5, 1, :] = np.array([0.6507, 0.09671, 0.04617, 0.06568, 0.02506, 0.003042, 0.002976, 0.0009268, 0.0004388, 0.0001734])
errors_skew[5, 2, :] = np.array([0.6465, 0.1656, 0.04984, 0.04963, 0.01873, 0.007915, 0.002388, 0.0009434, 0.0003213, 0.0001135])
errors_skew[6, 0, :] = np.array([0.8189, 0.8186, 0.8652, 0.8798, 0.8955, 0.9065, 0.9245, 0.9204, 0.9165, 0.9130])
errors_skew[6, 1, :] = np.array([0.8165, 0.8163, 0.8627, 0.8773, 0.8931, 0.9041, 0.9223, 0.9181, 0.9142, 0.9106])
errors_skew[6, 2, :] = np.array([0.7791, 0.7788, 0.8255, 0.8408, 0.8577, 0.8698, 0.8903, 0.8855, 0.8811, 0.8770])
errors_skew[7, 0, :] = np.array([1., 0.4161, 0.3536, 0.4026, 0.4281, 0.4637, 0.4742, 0.4906, 0.4906, 0.5206])
errors_skew[7, 1, :] = np.array([1., 0.2921, 0.2651, 0.2797, 0.2845, 0.2749, 0.2897, 0.2560, 0.2560, 0.2312])
errors_skew[7, 2, :] = np.array([1., 0.2504, 0.3797, 0.05494, 0.05192, 0.02523, 0.04037, 0.03172, 0.03172, 0.02682])

errors_dig = np.empty((8, 3, 10))
errors_dig[0, 0, :] = np.array([0.6838, 0.5479, 0.4665, 0.4146, 0.3735, 0.1701, 0.1024, 0.1054, 0.1131, 0.07230])
errors_dig[0, 1, :] = np.array([0.6726, 0.5381, 0.4593, 0.4093, 0.3578, 0.1610, 0.09681, 0.09967, 0.1070, 0.06840])
errors_dig[0, 2, :] = np.array([0.5631, 0.4522, 0.3985, 0.1811, 0.2215, 0.09010, 0.05415, 0.05606, 0.06072, 0.03940])
errors_dig[1, 0, :] = np.array([0.6786, 0.5235, 0.4382, 0.3905, 0.3633, 0.1660, 0.1008, 0.1008, 0.1008, 0.06895])
errors_dig[1, 1, :] = np.array([0.6660, 0.5123, 0.4300, 0.3845, 0.3587, 0.1568, 0.09524, 0.09524, 0.09524, 0.06555])
errors_dig[1, 2, :] = np.array([0.5389, 0.4128, 0.3593, 0.3326, 0.1609, 0.08656, 0.05488, 0.05488, 0.05488, 0.04075])
errors_dig[2, 0, :] = np.array([0.2559, 0.1117, 0.04918, 0.02319, 0.01171, 0.006236, 0.003467, 0.001997, 0.001189, 0.0005621])
errors_dig[2, 1, :] = np.array([0.2408, 0.1039, 0.04527, 0.02114, 0.01009, 0.005592, 0.002622, 0.001770, 0.0008155, 0.0004527])
errors_dig[2, 2, :] = np.array([0.1148, 0.04627, 0.01815, 0.007749, 0.003599, 0.001783, 0.0007461, 0.0005012, 0.0002103, 0.0001035])
errors_dig[3, 0, :] = np.array([0.6715, 0.6715, 0.6715, 0.6715, 0.6715, 0.6715, 0.6715, 0.6715, 0.6715, 0.6714])
errors_dig[3, 1, :] = np.array([0.6638, 0.6638, 0.6636, 0.6607, 0.6496, 0.6262, 0.5901, 0.5438, 0.4981, 0.4348])
errors_dig[3, 2, :] = np.array([0.5668, 0.5607, 0.4094, 0.1736, 0.05306, 0.02455, 0.03151, 0.05247, 0.05776, 0.05011])
errors_dig[4, 0, :] = np.array([0.6289, 0.5683, 0.5266, 0.4938, 0.9642, 0.9580, 0.4218, 0.4030, 0.3859, 0.3702])
errors_dig[4, 1, :] = np.array([0.3713, 0.2589, 0.1884, 0.1383, 0.1004, 0.07093, 0.04741, 0.02840, 0.01576, 0.008926])
errors_dig[4, 2, :] = np.array([0.02453, 0.06922, 0.06526, 0.05242, 0.03987, 0.02965, 0.02185, 0.01607, 0.01184, 0.008771])
errors_dig[5, 0, :] = np.array([0.6289, 0.02437, 0.01109, 0.0008605, 0.00008251, 0.00001374, 0.000007155, 0.000002918, 0.000002170, 0.000001953])
errors_dig[5, 1, :] = np.array([0.3713, 0.04769, 0.01024, 0.0009368, 0.00008237, 0.00003030, 0.000005892, 0.000002482, 0.000002033, 0.000001876])
errors_dig[5, 2, :] = np.array([0.02453, 0.03563, 0.008303, 0.0006318, 0.00005841, 0.00001105, 0.000003487, 0.000002193, 0.000002196, 0.000002195])
errors_dig[6, 0, :] = np.array([0.8513, 0.7598, 0.6900, 0.6367, 0.5953, 0.5622, 0.5353, 0.5129, 0.4939, 0.4777])
errors_dig[6, 1, :] = np.array([0.8446, 0.7493, 0.6775, 0.6232, 0.5811, 0.5477, 0.5205, 0.4980, 0.4790, 0.4628])
errors_dig[6, 2, :] = np.array([0.7610, 0.6337, 0.5480, 0.4872, 0.4423, 0.4080, 0.3809, 0.3590, 0.3410, 0.3260])
errors_dig[7, 0, :] = np.array([1., 0.2205, 0.2205, 0.5885, 0.5885, 0.9022, 0.9022, 1.106, 1.106, 1.269])
errors_dig[7, 1, :] = np.array([1., 0.1812, 0.1812, 0.5110, 0.5110, 0.7270, 0.7270, 0.8455, 0.8455, 0.9225])
errors_dig[7, 2, :] = np.array([1., 0.05992, 0.05992, 0.1222, 0.1222, 0.1387, 0.1387, 0.1397, 0.1397, 0.1347])

errors = np.empty((8, 3, 20))
N = np.arange(1, 11)

quadrature_rules = np.array([[[[1.36623284e+00, 0.00000000e+00, 0.00000000e+00,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
          0.00000000e+00],
         [9.62999782e-01, 1.91447086e+01, 0.00000000e+00,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
          0.00000000e+00],
         [7.77824112e-01, 1.11242552e+01, 1.17374445e+02,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
          0.00000000e+00],
         [6.69418142e-01, 8.33431692e+00, 5.52636238e+01,
          5.59932316e+02, 0.00000000e+00, 0.00000000e+00,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
          0.00000000e+00],
         [5.95832442e-01, 6.86654033e+00, 3.62306876e+01,
          2.23169664e+02, 2.25066260e+03, 0.00000000e+00,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
          0.00000000e+00],
         [5.41809111e-01, 5.94817057e+00, 2.73483577e+01,
          1.30374380e+02, 7.97629727e+02, 8.04796170e+03,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
          0.00000000e+00],
         [4.99770821e-01, 5.30763707e+00, 2.22554098e+01,
          9.00725678e+01, 4.23985736e+02, 2.59256828e+03,
          2.61621419e+04, 0.00000000e+00, 0.00000000e+00,
          0.00000000e+00],
         [4.66041085e-01, 4.83222086e+00, 1.89760670e+01,
          6.84707260e+01, 2.71944266e+02, 1.27851734e+03,
          7.81946258e+03, 7.89305111e+04, 0.00000000e+00,
          0.00000000e+00],
         [4.38088919e-01, 4.46089440e+00, 1.66809441e+01,
          5.52477313e+01, 1.94236912e+02, 7.69241324e+02,
          3.61562495e+03, 2.21141340e+04, 2.23230389e+05,
          0.00000000e+00],
         [4.27315088e-01, 4.32073061e+00, 1.58389394e+01,
          5.04925223e+01, 1.67181149e+02, 6.05857172e+02,
          2.50238436e+03, 1.25892633e+04, 8.74039948e+04,
          1.05819374e+06]],

        [[1.33435165e+00, 0.00000000e+00, 0.00000000e+00,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
          0.00000000e+00],
         [9.38588240e-01, 1.87316636e+01, 0.00000000e+00,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
          0.00000000e+00],
         [7.57334295e-01, 1.09097336e+01, 1.13759104e+02,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
          0.00000000e+00],
         [6.51542831e-01, 8.18655720e+00, 5.37819001e+01,
          5.37459212e+02, 0.00000000e+00, 0.00000000e+00,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
          0.00000000e+00],
         [5.85402598e-01, 6.85409792e+00, 3.64446054e+01,
          2.27606790e+02, 2.34506011e+03, 0.00000000e+00,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
          0.00000000e+00],
         [5.26977651e-01, 5.85045664e+00, 2.67430106e+01,
          1.26197088e+02, 7.62958619e+02, 7.59183435e+03,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
          0.00000000e+00],
         [4.95892890e-01, 5.36905598e+00, 2.28823668e+01,
          9.52476156e+01, 4.68749983e+02, 3.07121501e+03,
          3.43642260e+04, 0.00000000e+00, 0.00000000e+00,
          0.00000000e+00],
         [4.53142566e-01, 4.75627918e+00, 1.86090727e+01,
          6.65916514e+01, 2.61808848e+02, 1.21728984e+03,
          7.35600780e+03, 7.32459131e+04, 0.00000000e+00,
          0.00000000e+00],
         [4.29997240e-01, 4.45236175e+00, 1.68347236e+01,
          5.71001445e+01, 2.09340646e+02, 8.81348588e+02,
          4.46551315e+03, 2.94075282e+04, 3.36192372e+05,
          0.00000000e+00],
         [4.15766546e-01, 4.25772480e+00, 1.55626471e+01,
          4.92128155e+01, 1.61297760e+02, 5.79671081e+02,
          2.39008055e+03, 1.21935449e+04, 8.94786810e+04,
          1.21628168e+06]],

        [[1.03609679e+00, 0.00000000e+00, 0.00000000e+00,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
          0.00000000e+00],
         [7.12632932e-01, 1.52426437e+01, 0.00000000e+00,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
          0.00000000e+00],
         [5.71493654e-01, 9.13741583e+00, 8.59950048e+01,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
          0.00000000e+00],
         [4.89799896e-01, 6.94518029e+00, 4.22779467e+01,
          3.74502992e+02, 0.00000000e+00, 0.00000000e+00,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
          0.00000000e+00],
         [4.34288027e-01, 5.76551227e+00, 2.84818182e+01,
          1.56450955e+02, 1.37549253e+03, 0.00000000e+00,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
          0.00000000e+00],
         [3.93705486e-01, 5.01746481e+00, 2.19232989e+01,
          9.45147903e+01, 5.12594579e+02, 4.50287139e+03,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
          0.00000000e+00],
         [3.69962407e-01, 4.61685516e+00, 1.89747591e+01,
          7.28777661e+01, 3.25257806e+02, 1.91077231e+03,
          1.89223382e+04, 0.00000000e+00, 0.00000000e+00,
          0.00000000e+00],
         [3.37144725e-01, 4.09793180e+00, 1.56180087e+01,
          5.21186173e+01, 1.87649738e+02, 7.90647585e+02,
          4.28411245e+03, 3.76825954e+04, 0.00000000e+00,
          0.00000000e+00],
         [3.22647906e-01, 3.88088102e+00, 1.43647101e+01,
          4.54099894e+01, 1.50932344e+02, 5.67075251e+02,
          2.56062049e+03, 1.54484859e+04, 1.59772453e+05,
          0.00000000e+00],
         [3.04607859e-01, 3.62024430e+00, 1.29675695e+01,
          3.85931812e+01, 1.17547338e+02, 3.92451413e+02,
          1.50277922e+03, 7.04066748e+03, 4.57402304e+04,
          5.54193695e+05]]],


       [[[1.70425301e+00, 0.00000000e+00, 0.00000000e+00,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
          0.00000000e+00],
         [1.34200406e+00, 3.77220169e+00, 0.00000000e+00,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
          0.00000000e+00],
         [1.17657917e+00, 2.26994038e+00, 9.11961058e+00,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
          0.00000000e+00],
         [1.07863091e+00, 1.73343557e+00, 4.71635129e+00,
          1.98682147e+01, 0.00000000e+00, 0.00000000e+00,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
          0.00000000e+00],
         [1.01058428e+00, 1.45675013e+00, 3.21083962e+00,
          9.40340934e+00, 3.97555554e+01, 0.00000000e+00,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
          0.00000000e+00],
         [9.59333428e-01, 1.28869532e+00, 2.47434063e+00,
          6.00169740e+00, 1.77542560e+01, 7.50763000e+01,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
          0.00000000e+00],
         [9.18433175e-01, 1.17462007e+00, 2.04256600e+00,
          4.37956417e+00, 1.07962276e+01, 3.19705602e+01,
          1.35246054e+02, 0.00000000e+00, 0.00000000e+00,
          0.00000000e+00],
         [8.84812208e-01, 1.09171767e+00, 1.76147173e+00,
          3.45351200e+00, 7.57940627e+00, 1.87280440e+01,
          5.54699067e+01, 2.34682045e+02, 0.00000000e+00,
          0.00000000e+00],
         [8.56314533e-01, 1.02807433e+00, 1.56402570e+00,
          2.85971091e+00, 5.77791757e+00, 1.27282588e+01,
          3.14611187e+01, 9.31904493e+01, 3.94245421e+02,
          0.00000000e+00],
         [8.45127214e-01, 1.00376290e+00, 1.48811843e+00,
          2.62524177e+00, 5.06292951e+00, 1.04699116e+01,
          2.37332761e+01, 6.17965163e+01, 1.99698996e+02,
          9.03796493e+02]],

        [[1.69460574e+00, 0.00000000e+00, 0.00000000e+00,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
          0.00000000e+00],
         [1.33835528e+00, 3.62275066e+00, 0.00000000e+00,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
          0.00000000e+00],
         [1.17577579e+00, 2.19222852e+00, 8.56413560e+00,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
          0.00000000e+00],
         [1.07955326e+00, 1.68087420e+00, 4.46075136e+00,
          1.83092793e+01, 0.00000000e+00, 0.00000000e+00,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
          0.00000000e+00],
         [1.01792469e+00, 1.43538549e+00, 3.13444883e+00,
          9.11915770e+00, 3.81392146e+01, 0.00000000e+00,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
          0.00000000e+00],
         [9.62005594e-01, 1.25612877e+00, 2.36036633e+00,
          5.61319535e+00, 1.62492020e+01, 6.69910708e+01,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
          0.00000000e+00],
         [9.31507828e-01, 1.17221763e+00, 2.04405891e+00,
          4.42532788e+00, 1.10864087e+01, 3.36782013e+01,
          1.46278371e+02, 0.00000000e+00, 0.00000000e+00,
          0.00000000e+00],
         [8.88509239e-01, 1.06759144e+00, 1.68945800e+00,
          3.25427019e+00, 7.01832410e+00, 1.70169170e+01,
          4.93392772e+01, 2.03473125e+02, 0.00000000e+00,
          0.00000000e+00],
         [8.64745495e-01, 1.01844121e+00, 1.55133716e+00,
          2.87672990e+00, 5.93927700e+00, 1.34233652e+01,
          3.39086717e+01, 1.01348271e+02, 4.56678505e+02,
          0.00000000e+00],
         [8.49676629e-01, 9.83603059e-01, 1.43110434e+00,
          2.48050779e+00, 4.71021637e+00, 9.62413269e+00,
          2.16731322e+01, 5.67276044e+01, 1.89259774e+02,
          8.85092413e+02]],

        [[1.58295328e+00, 0.00000000e+00, 0.00000000e+00,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
          0.00000000e+00],
         [1.29090425e+00, 2.37758816e+00, 0.00000000e+00,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
          0.00000000e+00],
         [1.16042133e+00, 1.52993518e+00, 4.57711344e+00,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
          0.00000000e+00],
         [1.08175582e+00, 1.21935332e+00, 2.55571884e+00,
          8.23125598e+00, 0.00000000e+00, 0.00000000e+00,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
          0.00000000e+00],
         [1.02582549e+00, 1.05675513e+00, 1.82995332e+00,
          4.26570011e+00, 1.38394775e+01, 0.00000000e+00,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
          0.00000000e+00],
         [9.83158014e-01, 9.56657922e-01, 1.46509192e+00,
          2.88992124e+00, 6.84821669e+00, 2.22350698e+01,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
          0.00000000e+00],
         [9.57346258e-01, 9.04358076e-01, 1.29746569e+00,
          2.35706776e+00, 4.92636530e+00, 1.21908098e+01,
          4.13760483e+01, 0.00000000e+00, 0.00000000e+00,
          0.00000000e+00],
         [9.20384765e-01, 8.37503557e-01, 1.10285557e+00,
          1.80417088e+00, 3.31178019e+00, 6.73885184e+00,
          1.60206014e+01, 5.20438445e+01, 0.00000000e+00,
          0.00000000e+00],
         [9.03529238e-01, 8.09996248e-01, 1.03015474e+00,
          1.61456165e+00, 2.82272736e+00, 5.36650315e+00,
          1.13749540e+01, 2.86168211e+01, 9.85850498e+01,
          0.00000000e+00],
         [8.82044446e-01, 7.77350849e-01, 9.49770017e-01,
          1.41633862e+00, 2.34779366e+00, 4.17825527e+00,
          8.07274239e+00, 1.75724904e+01, 4.63979686e+01,
          1.72236495e+02]]]])

for i in range(1, 1):
    # tic = time.perf_counter()
    true_smile = skew_0001
    # true_smile = np.load(f'rHeston prices digital eur call standard params H={H[i]} T=1 k=(-1, 0.5, 301).npy')
    # true_smile = np.load(f'rHeston skew eur call standard params H={H[i]} T=(0.004, 1, 25) logspaced.npy')
    # true_smile = np.load(f'rHeston smile eur call standard params H={H[i]} T=0.01 k=(-1, 0.5, 301).npy')
    # true_smile = np.load(f'rHeston smile eur call standard params H={H[i]} T=(0.04, 1, 25) k=(-1, 0.5, 301).npy')
    # true_smile = rHestonFourier.eur_call_put(digital=False, lambda_=lambda_, rho=rho, nu=nu, theta=theta, V_0=V_0,
    #                                              S_0=S_0, T=T, H=H[i], K=K, rel_tol=rel_tol, verbose=verbose)
    # np.save(f'rHeston smile eur call standard params H={H[i]} T=0.01 k=(-1, 0.5, 301).npy', true_smile)
    # print(time.perf_counter() - tic)
    for j in np.arange(1, 11):
        N_here = j if j < 11 else 2 ** (j - 7)
        for m in [5]:
            if j == 1:
                t = np.amin(T) ** (3 / 5) * np.amax(T) ** (2 / 5)
            elif j == 2:
                t = np.amin(T) ** (1 / 2) * np.amax(T) ** (1 / 2)
            elif j == 3:
                t = np.amin(T) ** (1 / 3) * np.amax(T) ** (2 / 3)
            elif j == 4:
                t = np.amin(T) ** (1 / 4) * np.amax(T) ** (3 / 4)
            elif j == 5:
                t = np.amin(T) ** (1 / 6) * np.amax(T) ** (5 / 6)
            elif j == 6:
                t = np.amin(T) ** (1 / 10) * np.amax(T) ** (9 / 10)
            else:
                t = np.amax(T)
            tic = time.perf_counter()
            if m == 0:
                print(H[i], N_here, T)
                nodes, weights = rk.quadrature_rule(H=H[i], N=N_here, T=T, mode="new geometric theorem l1")
            elif m == 1:
                nodes, weights = rk.quadrature_rule(H=H[i], N=N_here, T=T, mode="non-geometric l1")
            elif m == 2:
                if N_here > 10:
                    break
                nodes, weights = 1 / t * quadrature_rules[0, i, j - 1, :j], t ** (H[i] - 0.5) * quadrature_rules[1, i, j - 1, :j]
            elif m == 3:
                nodes, weights = rk.quadrature_rule(H=H[i], N=N_here, T=T, mode="paper")
            elif m == 4:
                nodes, weights = rk.optimize_error_l2(H=H[i], N=N_here, T=t)[1:3]
            elif m == 5:
                nodes, weights = rk.quadrature_rule(H=H[i], N=N_here, T=T, mode="european")
            elif m == 6:
                nodes, weights = rk.quadrature_rule(H=H[i], N=N_here, T=T, mode="abi jaber")
            else:
                nodes, weights = rk.quadrature_rule(H=H[i], N=N_here, T=T, mode="alfonsi")
                if N_here == 1:
                    break
            print(f'Node computational time {time.perf_counter() - tic}')
            tic = time.perf_counter()
            
            approx_smile = rHestonFourier.eur_call_put(digital=True, lambda_=lambda_, rho=rho, nu=nu, theta=theta, V_0=V_0,
                                                       S_0=S_0, T=T, H=H[i], K=K, rel_tol=rel_tol, verbose=verbose,
                                                       nodes=nodes, weights=weights, implied_vol=False)
                                                       
            approx_smile = rHestonFourier.skew_eur_call_put(lambda_=lambda_, rho=rho, nu=nu, theta=theta, V_0=V_0, T=T,
                                                            rel_tol=rel_tol, H=H[i], nodes=nodes, weights=weights,
                                                            verbose=0)

            print(f'Smile computational time {time.perf_counter() - tic}')
            plt.loglog(T, approx_smile, color=functions.color(j - 1, 10), label=f'N={j}')
            err = np.amax(np.abs(true_smile - approx_smile) / true_smile)
            print(i, j, m, err)
            errors[m, i, j - 1] = err

    plt.loglog(T, true_smile, 'k-', label='Non-Markovian skew')
    plt.xlabel('Maturity T')
    plt.ylabel('Skew')
    plt.title('Skew')
    plt.legend(loc='best')
    plt.show()


for i in range(errors_surface.shape[0]):
    plt.loglog(N, errors_dig[i, 0, :], color=functions.color(i, errors_surface.shape[0]), label=modes[i])
plt.loglog(N, 2e-05 * np.ones(len(N)), 'k-')
plt.xlabel('Number of nodes N')
plt.ylabel('Maximal relative error')
plt.title('Relative errors of implied volatility surfaces')
plt.legend(loc='best')
plt.show()

plt.loglog(N, errors_dig[0, 0, :], color=functions.color(0, 4), label='GG')
plt.loglog(N, errors_dig[0, 1, :], '--', color=functions.color(0, 4))
plt.loglog(N, errors_dig[0, 2, :], '-.', color=functions.color(0, 4))
plt.loglog(N, errors_dig[2, 0, :], color=functions.color(1, 4), label='OL1')
plt.loglog(N, errors_dig[2, 1, :], '--', color=functions.color(1, 4))
plt.loglog(N, errors_dig[2, 2, :], '-.', color=functions.color(1, 4))
plt.loglog(N, errors_dig[4, 0, :], color=functions.color(2, 4), label='OL2')
plt.loglog(N, errors_dig[4, 1, :], '--', color=functions.color(2, 4))
plt.loglog(N, errors_dig[4, 2, :], '-.', color=functions.color(2, 4))
plt.loglog(N, errors_dig[5, 0, :], color=functions.color(3, 4), label='BL2')
plt.loglog(N, errors_dig[5, 1, :], '--', color=functions.color(3, 4))
plt.loglog(N, errors_dig[5, 2, :], '-.', color=functions.color(3, 4))
plt.loglog(N, 2e-05 * np.ones(len(N)), 'k-')
plt.xlabel('Number of nodes N')
plt.ylabel('Maximal relative error')
plt.title('Relative errors of implied volatility surfaces')
plt.legend(loc='best')
plt.show()

time.sleep(360000)
'''

# ---------------------------------------------------------------------------------------------------------------
# Bermudan option prices for the Markovian Mackevicius Paper. The parameters used are
# lambda_ = 0.3, nu = 0.3, theta = 0.02, V_0 = 0.02, rho = -0.7, S_0 = 100., T = 1., H = 0.1, K = 105., r = 0.06
# The number of Monte Carlo samples used is 1_000_000, 500_000 of which are used for fitting the stopping rules,
# and 500_000 for pricing the option. The Markovian schemes use antithtetic variates. For the Longstaff-Schwartz
# linear regression, we use polynomials in S, V, and the components of V, of weighted degree at most 8.
# We use 4, 16, or 256 exercise times, linearly spaced over [0, 1]. The sample paths are simulated with a number of
# time steps that is always a power of 2. In the arrays below, the prices are for increasing number of time steps in the
# simulation. For example, for 16 exercise times, these prices correspond to 16, 32, 64, 128, 256, 512, and 1024
# simulation time steps.
# The general naming convention is as follows.
# bermudan_prices_A_method_N
# where A is the number of exercise times (4, 16, or 256), method is the method of simulation (QE, Euler, or Weak),
# and N, only for the Markovian approximations (Euler and Weak) denotes the number of dimensions for approximating
# the volatility.
# Furthermore, we have arrays for determining which weighted degree of polynomials we should use in the linear
# regression in Longstaff-Schwartz. In the end, we chose a maximal weighted degree of 8. The arrays with varying maximal
# degree are denoted by
# bermudan_prices_A_method_depending_on_d
# where A is the number of exercise times (4 or 16), and method is the method for simulation (QE, Euler, or Weak).
# We always use 256 simulation time steps, and for the Markovian approximations, we use 3 dimensions for the volatility.
# All these MC estimates below of course come with MC errors. We give approximately the MC errors of the pricing
# (i.e. the second step of the Longstaff-Schwartz algorithm), in terms of a 95% confidence interval, for the prices
# below. The naming convention is
# bermudan_prices_A_MC_error
# or
# bermudan_prices_A_depending_on_d_MC_error
# where A is the number of execution times (4, 16, or 256, and 4 or 16, respectively). The MC errors are similar
# for all methods and number of simulation time steps. The 95% MC intervals are hence roughly given by, e.g.,
# bermudan_prices_4_QE_depending_on_d +/- bermudan_prices_4_depending_on_d_MC_error.
bermudan_prices_4_QE_depending_on_d = \
    np.array([5.881312977844017, 5.968850620756691, 5.998553757861667, 6.006160182030647, 6.006383697727581,
              6.006263235149674, 6.008178490802654, 6.008523830888406, 6.009364315695357, 6.009343528951102])
bermudan_prices_16_QE_depending_on_d = \
    np.array([5.975877138293987, 6.111586468354794, 6.133727709676545, 6.1509455538422575, 6.154641777246265,
              6.158014128837235, 6.158766950398943, 6.158520021365969, 6.1621527362593795, 6.159249087253855])
bermudan_prices_4_Euler_depending_on_d = \
    np.array([6.054783793139857, 6.159708441955763, 6.20228676332753, 6.216731827913274, 6.218885182596948,
              6.218676583435156, 6.21894432367718, 6.2205907264635725, 6.217908309921049, 6.216903894341569])
bermudan_prices_16_Euler_depending_on_d = \
    np.array([6.147976009374668, 6.300566751997734, 6.3599674269505275, 6.38828958937379, 6.393769871447732,
              6.397455068946655, 6.396819084015585, 6.398640298451329, 6.398929582688365, 6.39708370098245])
bermudan_prices_4_Weak_depending_on_d = \
    np.array([5.887155699391186, 5.989452612718753, 6.038799039128605, 6.054692018775657, 6.055529845713608,
              6.052842941057083, 6.0551526792542925, 6.056899266851076, 6.0547788243116765, 6.054291819265685])
bermudan_prices_16_Weak_depending_on_d = \
    np.array([5.982915278022808, 6.144029283537505, 6.20662138026517, 6.231188122480796, 6.236681995867578,
              6.239516028915048, 6.244258417204066, 6.2475150990083295, 6.243166782714627, 6.238788655289753])
bermudan_prices_4_depending_on_d_MC_error = 0.022
bermudan_prices_16_depending_on_d_MC_error = 0.0205

bermudan_prices_4_QE = \
    np.array([5.759153259708528, 5.849745441674186, 5.950877598800659, 5.9760810510333044, 6.00055143696531,
              6.020520279637076, 6.008523830888406, 6.0052708190581585, 5.998668978300777])
bermudan_prices_16_QE = \
    np.array([6.108186686341114, 6.1376755379654995, 6.148969362688817, 6.164491459494097, 6.158520021365969,
              6.154609781154781, 6.1629121725498965])
bermudan_prices_256_QE = \
    np.array([6.122145926679324, 6.11613868482267, 6.134258103250474])
bermudan_prices_4_Euler_1 = \
    np.array([6.374994912074388, 6.428210948091557, 6.337767249793884, 6.222338166117672, 6.122125820317566,
              6.124113522529565, 6.08543869293257, 6.073672663916806, 6.074643688987093])
bermudan_prices_4_Weak_1 = \
    np.array([5.84016625395903, 5.984185407498253, 6.029869817364804, 6.064265531122275, 6.065994671888949,
              6.091467955508539, 6.069185109030468, 6.067684072599958, 6.055497464606124])
bermudan_prices_16_Euler_1 = \
    np.array([6.506932192102358, 6.385482948726982, 6.304988519866201, 6.288568136419512, 6.2634987607692345,
              6.254241700294283, 6.248516530539128])
bermudan_prices_16_Weak_1 = \
    np.array([6.209433658560861, 6.228173128211438, 6.251695791413654, 6.270230183806934, 6.251623923400068,
              6.256084539774051, 6.236805423970378])
bermudan_prices_256_Euler_1 = \
    np.array([6.306193949440956, 6.2874596034918575, 6.291323937091087])
bermudan_prices_256_Weak_1 = \
    np.array([6.293511391981054, 6.287814577174661, 6.273199102131892])
bermudan_prices_4_Euler_2 = \
    np.array([6.420390145127389, 6.472930797016549, 6.458838247666576, 6.364240742381819, 6.257612575183531,
              6.196801022064704, 6.120252614849627, 6.108887312409656, 6.0814427881406035])
bermudan_prices_4_Weak_2 = \
    np.array([5.783702082255862, 5.936975703357294, 6.013991614481586, 6.060701895557607, 6.086942776411719,
              6.073626406770916, 6.078451673607631, 6.092376219791714, 6.082868039016247])
bermudan_prices_16_Euler_2 = \
    np.array([6.630140959958434, 6.542539230136588, 6.434377181446154, 6.380682485919598, 6.309035979130753,
              6.293600027099479, 6.275720286664339])
bermudan_prices_16_Weak_2 = \
    np.array([6.205145264719924, 6.231609545104102, 6.263015109910695, 6.257616555092254, 6.267232619528006,
              6.276722597094117, 6.258378649955263])
bermudan_prices_256_Euler_2 = \
    np.array([6.344430779399225, 6.321748327491974, 6.305306909362065])
bermudan_prices_256_Weak_2 = \
    np.array([6.301194912728672, 6.318316116346498, 6.294297714897946])
bermudan_prices_4_Euler_3 = \
    np.array([6.398657083587142, 6.479940945615953, 6.492488861914647, 6.466431412420086, 6.38612362113434,
              6.30562219817047, 6.2205907264635725, 6.164454139067818, 6.126165399572341])
bermudan_prices_4_Weak_3 = \
    np.array([5.582231373826758, 5.812984613267271, 5.929799254569929, 6.005275274516244, 6.060022438581269,
              6.078758139791109, 6.056899266851076, 6.069635662532924, 6.081681696919653])
bermudan_prices_16_Euler_3 = \
    np.array([6.660958289864805, 6.639787544579042, 6.559597866760051, 6.47722382597367, 6.398640298451329,
              6.336305040475958, 6.3019964438789255])
bermudan_prices_16_Weak_3 = \
    np.array([6.108318508204293, 6.196936824424116, 6.238368060097502, 6.2605023752306765, 6.2475150990083295,
              6.248353190373457, 6.257423063271396])
bermudan_prices_256_Euler_3 = \
    np.array([6.433661802419653, 6.36660700918045, 6.323643496158492])
bermudan_prices_256_Weak_3 = \
    np.array([6.282204776091425, 6.290799267960921, 6.289616969621115])
bermudan_prices_4_Euler_4 = \
    np.array([6.406126843462981, 6.4633057044612165, 6.441774061026381, 6.433433636956694, 6.391686385381758,
              6.365513359686255, 6.327031422505806, 6.246376842322323, 6.164341809680132])
bermudan_prices_4_Weak_4 = \
    np.array([5.4362976021797715, 5.615935597891296, 5.799872869118376, 5.924465290342187, 5.999826544126777,
              6.056387810860024, 6.063220744715272, 6.084647288395503, 6.082758720011783])
bermudan_prices_16_Euler_4 = \
    np.array([6.6174189872125035, 6.59365408841299, 6.571667289827528, 6.5292510957202605, 6.490150895994291,
              6.4242716756146905, 6.341487168838822])
bermudan_prices_16_Weak_4 = \
    np.array([5.985484297556279, 6.107943180197603, 6.162857269579133, 6.223215685386942, 6.228446742528628,
              6.256058618685774, 6.250430035251435])
bermudan_prices_256_Euler_4 = \
    np.array([6.526466435611826, 6.454235797638589, 6.372289136335599])
bermudan_prices_256_Weak_4 = \
    np.array([6.264208536866021, 6.285533212002273, 6.293718989571229])
bermudan_prices_4_MC_error = 0.022
bermudan_prices_16_MC_error = 0.020
bermudan_prices_256_MC_error = 0.019


def illustrate_bermudan_option_prices():
    d_vec = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
    n_vec_4 = np.array([4, 8, 16, 32, 64, 128, 256, 512, 1024])
    n_vec_16 = np.array([16, 32, 64, 128, 256, 512, 1024])
    n_vec_256 = np.array([256, 512, 1024])
    plt.plot(d_vec, bermudan_prices_4_QE_depending_on_d, 'g', label='QE')
    plt.plot(d_vec, bermudan_prices_4_QE_depending_on_d - bermudan_prices_4_depending_on_d_MC_error, 'g--')
    plt.plot(d_vec, bermudan_prices_4_QE_depending_on_d + bermudan_prices_4_depending_on_d_MC_error, 'g--')
    plt.plot(d_vec, bermudan_prices_4_Euler_depending_on_d, 'b', label='Euler')
    plt.plot(d_vec, bermudan_prices_4_Euler_depending_on_d - bermudan_prices_4_depending_on_d_MC_error, 'b--')
    plt.plot(d_vec, bermudan_prices_4_Euler_depending_on_d + bermudan_prices_4_depending_on_d_MC_error, 'b--')
    plt.plot(d_vec, bermudan_prices_4_Weak_depending_on_d, 'r', label='Weak')
    plt.plot(d_vec, bermudan_prices_4_Weak_depending_on_d - bermudan_prices_4_depending_on_d_MC_error, 'r--')
    plt.plot(d_vec, bermudan_prices_4_Weak_depending_on_d + bermudan_prices_4_depending_on_d_MC_error, 'r--')
    plt.legend(loc='best')
    plt.xlabel('Weighted maximal degree d of polynomials')
    plt.ylabel('Prices of Bermudan put option')
    plt.title('Prices of Bermudan option with 4 execution times')
    plt.show()

    plt.plot(d_vec, bermudan_prices_16_QE_depending_on_d, 'g', label='QE')
    plt.plot(d_vec, bermudan_prices_16_QE_depending_on_d - bermudan_prices_16_depending_on_d_MC_error, 'g--')
    plt.plot(d_vec, bermudan_prices_16_QE_depending_on_d + bermudan_prices_16_depending_on_d_MC_error, 'g--')
    plt.plot(d_vec, bermudan_prices_16_Euler_depending_on_d, 'b', label='Euler')
    plt.plot(d_vec, bermudan_prices_16_Euler_depending_on_d - bermudan_prices_16_depending_on_d_MC_error, 'b--')
    plt.plot(d_vec, bermudan_prices_16_Euler_depending_on_d + bermudan_prices_16_depending_on_d_MC_error, 'b--')
    plt.plot(d_vec, bermudan_prices_16_Weak_depending_on_d, 'r', label='Weak')
    plt.plot(d_vec, bermudan_prices_16_Weak_depending_on_d - bermudan_prices_16_depending_on_d_MC_error, 'r--')
    plt.plot(d_vec, bermudan_prices_16_Weak_depending_on_d + bermudan_prices_16_depending_on_d_MC_error, 'r--')
    plt.legend(loc='best')
    plt.xlabel('Weighted maximal degree d of polynomials')
    plt.ylabel('Prices of Bermudan put option')
    plt.title('Prices of Bermudan option with 16 execution times')
    plt.show()

    plt.plot(n_vec_4, bermudan_prices_4_QE, 'g', label='QE')
    plt.plot(n_vec_4, bermudan_prices_4_QE - bermudan_prices_4_MC_error, 'g--')
    plt.plot(n_vec_4, bermudan_prices_4_QE + bermudan_prices_4_MC_error, 'g--')
    plt.plot(n_vec_4, bermudan_prices_4_Euler_1, 'b', label='Euler, N=1')
    plt.plot(n_vec_4, bermudan_prices_4_Euler_2, color='b', linestyle='dotted', label='Euler, N=2')
    plt.plot(n_vec_4, bermudan_prices_4_Euler_3, color='b', linestyle='dashed', label='Euler, N=3')
    plt.plot(n_vec_4, bermudan_prices_4_Euler_4, color='b', linestyle='dashdot', label='Euler, N=4')
    plt.plot(n_vec_4, bermudan_prices_4_Weak_1, color='r', label='Weak, N=1')
    plt.plot(n_vec_4, bermudan_prices_4_Weak_2, color='r', linestyle='dotted', label='Weak, N=2')
    plt.plot(n_vec_4, bermudan_prices_4_Weak_3, color='r', linestyle='dashed', label='Weak, N=3')
    plt.plot(n_vec_4, bermudan_prices_4_Weak_4, color='r', linestyle='dashdot', label='Weak, N=4')
    plt.xscale('log')
    plt.legend(loc='best')
    plt.xlabel('Number of simulation time steps')
    plt.ylabel('Prices of Bermudan put option')
    plt.title('Prices of Bermudan option with 4 execution times')
    plt.show()

    plt.plot(n_vec_16, bermudan_prices_16_QE, 'g', label='QE')
    plt.plot(n_vec_16, bermudan_prices_16_QE - bermudan_prices_16_MC_error, 'g--')
    plt.plot(n_vec_16, bermudan_prices_16_QE + bermudan_prices_16_MC_error, 'g--')
    plt.plot(n_vec_16, bermudan_prices_16_Euler_1, 'b', label='Euler, N=1')
    plt.plot(n_vec_16, bermudan_prices_16_Euler_2, color='b', linestyle='dotted', label='Euler, N=2')
    plt.plot(n_vec_16, bermudan_prices_16_Euler_3, color='b', linestyle='dashed', label='Euler, N=3')
    plt.plot(n_vec_16, bermudan_prices_16_Euler_4, color='b', linestyle='dashdot', label='Euler, N=4')
    plt.plot(n_vec_16, bermudan_prices_16_Weak_1, color='r', label='Weak, N=1')
    plt.plot(n_vec_16, bermudan_prices_16_Weak_2, color='r', linestyle='dotted', label='Weak, N=2')
    plt.plot(n_vec_16, bermudan_prices_16_Weak_3, color='r', linestyle='dashed', label='Weak, N=3')
    plt.plot(n_vec_16, bermudan_prices_16_Weak_4, color='r', linestyle='dashdot', label='Weak, N=4')
    plt.xscale('log')
    plt.legend(loc='best')
    plt.xlabel('Number of simulation time steps')
    plt.ylabel('Prices of Bermudan put option')
    plt.title('Prices of Bermudan option with 16 execution times')
    plt.show()

    plt.plot(n_vec_256, bermudan_prices_256_QE, 'g', label='QE')
    plt.plot(n_vec_256, bermudan_prices_256_QE - bermudan_prices_256_MC_error, 'g--')
    plt.plot(n_vec_256, bermudan_prices_256_QE + bermudan_prices_256_MC_error, 'g--')
    plt.plot(n_vec_256, bermudan_prices_256_Euler_1, 'b', label='Euler, N=1')
    plt.plot(n_vec_256, bermudan_prices_256_Euler_2, color='b', linestyle='dotted', label='Euler, N=2')
    plt.plot(n_vec_256, bermudan_prices_256_Euler_3, color='b', linestyle='dashed', label='Euler, N=3')
    plt.plot(n_vec_256, bermudan_prices_256_Euler_4, color='b', linestyle='dashdot', label='Euler, N=4')
    plt.plot(n_vec_256, bermudan_prices_256_Weak_1, color='r', label='Weak, N=1')
    plt.plot(n_vec_256, bermudan_prices_256_Weak_2, color='r', linestyle='dotted', label='Weak, N=2')
    plt.plot(n_vec_256, bermudan_prices_256_Weak_3, color='r', linestyle='dashed', label='Weak, N=3')
    plt.plot(n_vec_256, bermudan_prices_256_Weak_4, color='r', linestyle='dashdot', label='Weak, N=4')
    plt.xscale('log')
    plt.legend(loc='best')
    plt.xlabel('Number of simulation time steps')
    plt.ylabel('Prices of Bermudan put option')
    plt.title('Prices of Bermudan option with 256 execution times')
    plt.show()

    plt.plot(n_vec_4, bermudan_prices_4_QE, 'g', label='QE, 4 ex. times')
    plt.plot(n_vec_4, bermudan_prices_4_QE - bermudan_prices_4_MC_error, color='g', linestyle='dashdot')
    plt.plot(n_vec_4, bermudan_prices_4_QE + bermudan_prices_4_MC_error, color='g', linestyle='dashdot')
    plt.plot(n_vec_16, bermudan_prices_16_QE, color='g', linestyle='dotted', label='QE, 16 ex. times')
    plt.plot(n_vec_256, bermudan_prices_256_QE, color='g', linestyle='dashed', label='QE, 256 ex. times')
    plt.plot(n_vec_4, bermudan_prices_4_Euler_3, color='b', label='Euler, 4 ex. times')
    plt.plot(n_vec_16, bermudan_prices_16_Euler_3, color='b', linestyle='dotted', label='Euler, 16 ex. times')
    plt.plot(n_vec_256, bermudan_prices_256_Euler_3, color='b', linestyle='dashed', label='Euler, 256 ex. times')
    plt.plot(n_vec_4, bermudan_prices_4_Weak_3, color='r', label='Weak, 4 ex. times')
    plt.plot(n_vec_16, bermudan_prices_16_Weak_3, color='r', linestyle='dotted', label='Weak, 16 ex. times')
    plt.plot(n_vec_256, bermudan_prices_256_Weak_3, color='r', linestyle='dashed', label='Weak, 256 ex. times')
    plt.xscale('log')
    plt.legend(loc='best')
    plt.xlabel('Number of simulation time steps')
    plt.ylabel('Prices of Bermudan put option')
    plt.title('Prices of Bermudan options')
    plt.show()
