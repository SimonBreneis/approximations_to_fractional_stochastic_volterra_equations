import numpy as np
import matplotlib.pyplot as plt
import scipy
from scipy import stats


"""
The strong L^2-approximation errors of fBm with H=0.1 and T=1 using the AK scheme.
A node at x_0=0 is used, with optimal weight. Optimal xi_0 and xi_n are used.
The values of m used are contained in fBm_M, the values of n used for a specific m is contained in fBm_N[m-1].
The errors are given in fBm_errors, with the same indices as fBm_N.
An error entry with the value 0 is a numerical 0, i.e. the rounding error in the computation of the approximation 
error already exceeded the approximation error. This is, as it was already possible to choose xi_0 and xi_n such that
the computed error was negative before applying the root (which is necessary to compute the L^2-norm).
"""

fBm_M = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
fBm_N = [[1, 2, 3, 4, 6, 8, 11, 16, 23, 32, 45, 64, 91, 128, 181, 256, 362, 512, 724, 1024],
      [1, 2, 3, 4, 5, 8, 11, 16, 22, 32, 45, 64, 90, 128, 181, 256, 362, 512],
      [1, 2, 3, 4, 5, 8, 11, 15, 21, 30, 43, 60, 85, 121, 171, 241, 341],
      [1, 2, 3, 4, 6, 8, 11, 16, 23, 32, 45, 64, 90, 128, 181, 256],
      [1, 2, 3, 5, 6, 9, 13, 18, 26, 36, 51, 72, 102, 145, 205],
      [1, 2, 3, 4, 5, 7, 11, 15, 21, 30, 43, 60, 85, 121, 171],
      [1, 2, 3, 5, 6, 9, 13, 18, 26, 37, 52, 73, 103, 146],
      [1, 2, 3, 4, 6, 8, 11, 16, 23, 32, 45, 64, 90, 128],
      [1, 2, 3, 4, 5, 7, 10, 14, 20, 28, 40, 57, 80, 114],
      [1, 2, 3, 4, 6, 9, 13, 18, 26, 36, 51, 72, 102]]

fBm_errors = [[0.683687, 0.528237, 0.420265, 0.346109, 0.253310, 0.199291, 0.149395, 0.098625, 0.065529, 0.043699,
               0.028083, 0.017409, 0.010589, 0.006437, 0.003830, 0.002251, 0.001309, 0.000754, 0.000431, 0.000245],
          [0.635407, 0.451472, 0.333850, 0.256923, 0.204204, 0.119592, 0.076692, 0.039571, 0.022815, 0.010167, 0.004749,
           0.002037, 0.000866, 0.000342, 0.000132, 4.91e-05, 1.78e-05, 6.26e-06],
          [0.604933, 0.405954, 0.285941, 0.210481, 0.160789, 0.087336, 0.049924, 0.025489, 0.012368, 0.004540, 0.001559,
           0.000543, 0.000158, 4.34e-05, 1.14e-05, 2.86e-06, 6.71e-07],
          [0.582543, 0.374196, 0.253831, 0.180499, 0.103376, 0.069539, 0.035804, 0.013985, 0.005244, 0.001812, 0.000526,
           0.000123, 2.74e-05, 5.37e-06, 0., 1.57e-07],
          [0.564594, 0.350288, 0.230415, 0.115370, 0.087745, 0.044988, 0.017360, 0.006881, 0.002035, 0.000596, 0.000130,
           2.47e-05, 0., 4.99e-07, 0.],
          [0.549739, 0.331373, 0.212379, 0.143411, 0.101948, 0.048047, 0.021629, 0.008499, 0.003022, 0.000708, 0.000140,
           2.59e-05, 3.50e-06, 3.66e-07, 0.],
          [0.537137, 0.315874, 0.197939, 0.091741, 0.068621, 0.031377, 0.010481, 0.003575, 0.000841, 0.000167, 2.69e-05,
           3.64e-06, 3.76e-07, 0.],
          [0.526234, 0.302840, 0.186042, 0.120975, 0.062400, 0.035876, 0.014809, 0.004062, 0.001044, 0.000225, 3.50e-05,
           3.82e-06, 3.47e-07, 0.],
          [0.516652, 0.291658, 0.176020, 0.112708, 0.077254, 0.043063, 0.017208, 0.005369, 0.001490, 0.000283, 4.10e-05,
           0., 0., 0.],
          [0.508122, 0.281912, 0.167430, 0.105750, 0.053486, 0.020847, 0.005956, 0.001722, 0.000307, 5.28e-05, 5.47e-06,
           4.40e-07, 2.21e-08]]


def plot_fBm_errors():
    """
    Plots a loglog-plot of the strong L^2-errors of approximating a fBm with H=0.1 and T=1 for varying n and m.
    Includes a node at x_0=0 and takes optimal values of xi_0 and xi_n.
    """
    for m in fBm_M:
        n_here = np.array(fBm_N[m-1])
        errors_here = np.array(fBm_errors[m-1])
        plt.loglog(m*n_here[:-1]+1, errors_here[:-1], label=f"m={m}")

    plt.legend(loc="upper right")
    plt.xlabel("Number of nodes")
    plt.ylabel("Error")
    plt.show()


'''
The rBergomi implied volatility smiles, pre-exponential approach. Parameters used are
H=0.07, T=0.9, number_time_steps=1000, eta=1.9, V_0=0.235**2, S_0=1, rho=-0.9.
The vector of log-strikes is given below (k_vec).
m is always chosen 1, n is in [2, 4, 8, 16, 32, 64].
We have xi_0 = n^(-1/(0.5-H)) and xi_n = n^(1/H).
rBergomi is the Bergomi smile for the BFG approximation (with log-strikes k_vec).
rBergomi_n is the Bergomi smile for the AK approximation (with log-strikes k_vec).
mean_error_avg is the arithmetic mean of the absolute values of the errors of the AK approximation compared to the 
BFG approximation, averaged over the log-strikes in k_vec, and indexed by n.
upper_error_avg is the 95% confidence upper bound of the mean_error_avg.
mean_error_01 and upper_error_01 are defined similarly, but they are not averages but the values for k=0.1.
10**6 samples are used for the MC estimates.
'''

k_vec = np.array([i / 100. for i in range(-40, 21)])
rBergomi = np.array([0.30878589, 0.30629082, 0.30378026, 0.30125732, 0.29872267, 0.29617548,
                     0.29361944, 0.29105047, 0.28846861, 0.28587805, 0.28327942, 0.28066776,
                     0.27804194, 0.27540347, 0.27275188, 0.27008338, 0.26740030, 0.26470467,
                     0.26199638, 0.25927082, 0.25653326, 0.25378723, 0.25102863, 0.24825490,
                     0.24546746, 0.24266456, 0.23984552, 0.23701176, 0.23416258, 0.23130497,
                     0.22843492, 0.22555297, 0.22265999, 0.21975504, 0.21684114, 0.21391494,
                     0.21097830, 0.20802965, 0.20506966, 0.20210868, 0.19914467, 0.19617844,
                     0.19321570, 0.19026870, 0.18734111, 0.18442839, 0.18153762, 0.17867544,
                     0.17585233, 0.17308232, 0.17037065, 0.16772805, 0.16516713, 0.16270101,
                     0.16034282, 0.15810844, 0.15601021, 0.15405349, 0.15223960, 0.15057060,
                     0.14905202])

rBergomi_2 = np.array([0.26954819, 0.26857467, 0.26759884, 0.26661924, 0.26563986, 0.26466083,
                       0.26367770, 0.26270334, 0.26173995, 0.26077652, 0.25980985, 0.25884828,
                       0.25788317, 0.25691491, 0.25594331, 0.25496806, 0.25398495, 0.25299145,
                       0.25199333, 0.25099640, 0.24999695, 0.24899307, 0.24798630, 0.24697772,
                       0.24596624, 0.24495475, 0.24394403, 0.24293329, 0.24191834, 0.24089753,
                       0.23987157, 0.23884129, 0.23780874, 0.23677682, 0.23574285, 0.23470682,
                       0.23366923, 0.23262696, 0.23158358, 0.23053741, 0.22949098, 0.22844434,
                       0.22739505, 0.22634232, 0.22528648, 0.22423024, 0.22317175, 0.22211158,
                       0.22105115, 0.21998431, 0.21891229, 0.21783576, 0.21675316, 0.21567167,
                       0.21458424, 0.21349738, 0.21241055, 0.21132085, 0.21023120, 0.20914157,
                       0.20805303])

rBergomi_4 = np.array([0.29148540, 0.28979548, 0.28810566, 0.28641570, 0.28471764, 0.28301367,
                       0.28130973, 0.27960403, 0.27789295, 0.27617730, 0.27445798, 0.27273219,
                       0.27099986, 0.26926220, 0.26751718, 0.26576665, 0.26401197, 0.26225347,
                       0.26048880, 0.25872220, 0.25695406, 0.25518142, 0.25340231, 0.25162107,
                       0.24983779, 0.24805124, 0.24626010, 0.24446533, 0.24266368, 0.24085262,
                       0.23903010, 0.23719933, 0.23536305, 0.23351918, 0.23166424, 0.22980830,
                       0.22794920, 0.22608380, 0.22421000, 0.22233015, 0.22043906, 0.21853473,
                       0.21662281, 0.21470572, 0.21278553, 0.21086296, 0.20893536, 0.20700288,
                       0.20506296, 0.20312356, 0.20118659, 0.19924979, 0.19730981, 0.19536559,
                       0.19341135, 0.19145382, 0.18948829, 0.18752153, 0.18556310, 0.18361192,
                       0.18166196])

rBergomi_8 = np.array([0.29263517, 0.29096081, 0.28927793, 0.28758692, 0.28588227, 0.28417107,
                       0.28244773, 0.28071616, 0.27897379, 0.27722156, 0.27545674, 0.27368181,
                       0.27189882, 0.27010457, 0.26830037, 0.26648627, 0.2646625, 0.26283184,
                       0.26099409, 0.25914671, 0.25728991, 0.25542474, 0.25355117, 0.25167086,
                       0.24978058, 0.24787653, 0.24596373, 0.24404046, 0.24210845, 0.24016533,
                       0.23821297, 0.23625370, 0.23428790, 0.23231638, 0.23033046, 0.22833328,
                       0.22633005, 0.22432302, 0.22230742, 0.22028815, 0.21826258, 0.21623074,
                       0.21419376, 0.21215383, 0.21011321, 0.20807370, 0.20602790, 0.20397752,
                       0.20192458, 0.19986895, 0.19780403, 0.19573423, 0.19366975, 0.19161056,
                       0.18955597, 0.18750978, 0.18547212, 0.18343419, 0.18140028, 0.17937711,
                       0.17736915])

rBergomi_16 = np.array([0.30225526, 0.30013381, 0.29799969, 0.29585726, 0.29370582, 0.29154356,
                        0.28937614, 0.28719628, 0.28500224, 0.28279380, 0.28057324, 0.27834435,
                        0.27610282, 0.27384913, 0.27158234, 0.26930375, 0.26701037, 0.26470713,
                        0.26239234, 0.26006992, 0.25773827, 0.25539224, 0.25303568, 0.25067045,
                        0.24829468, 0.24590539, 0.24350559, 0.24109616, 0.23867238, 0.23624039,
                        0.23379810, 0.23134269, 0.22887083, 0.22638790, 0.22389468, 0.22139110,
                        0.21887740, 0.21634786, 0.21381014, 0.21126753, 0.20871685, 0.20615744,
                        0.20359198, 0.20101957, 0.19844216, 0.19586753, 0.19329621, 0.19072116,
                        0.18815355, 0.18559310, 0.18304491, 0.18050839, 0.17799163, 0.17550204,
                        0.17304590, 0.17063451, 0.16827450, 0.16596925, 0.16371494, 0.16153584,
                        0.15944656])

rBergomi_32 = np.array([0.30448798, 0.30221138, 0.29992409, 0.2976232, 0.29530925, 0.29298094,
                        0.29064271, 0.28829284, 0.28592646, 0.28354444, 0.28115215, 0.27874806,
                        0.27633292, 0.27390937, 0.27147717, 0.26903089, 0.26656888, 0.26409849,
                        0.26161619, 0.25912092, 0.25661453, 0.25409455, 0.25156119, 0.24901402,
                        0.24645042, 0.24387062, 0.24127644, 0.23866657, 0.23604051, 0.23340071,
                        0.23074539, 0.22807996, 0.22540203, 0.22270992, 0.22000639, 0.21729123,
                        0.2145643, 0.21182864, 0.20908149, 0.20632356, 0.20355565, 0.20078378,
                        0.19801083, 0.19524012, 0.19247322, 0.18971951, 0.18698369, 0.18426788,
                        0.18157419, 0.1788987, 0.17624828, 0.17363767, 0.17106947, 0.16855319,
                        0.16610667, 0.16374242, 0.16147046, 0.15929046, 0.15720677, 0.15523531,
                        0.15338483])

rBergomi_64 = np.array([0.31009601, 0.30756878, 0.30503451, 0.30249607, 0.29995251, 0.29740012,
                        0.29483877, 0.29227058, 0.28969126, 0.2870982, 0.28449643, 0.28188293,
                        0.27926019, 0.27662655, 0.27398364, 0.27132884, 0.26866268, 0.26598539,
                        0.2632954, 0.26059775, 0.25789122, 0.255172, 0.25244314, 0.24970178,
                        0.24694694, 0.24418135, 0.2414026, 0.23860819, 0.23580387, 0.23298832,
                        0.23015886, 0.2273164, 0.22446544, 0.22160756, 0.21873789, 0.21585969,
                        0.21297178, 0.21007242, 0.20716663, 0.20425301, 0.20133059, 0.19840866,
                        0.19548851, 0.19257604, 0.18967043, 0.18678067, 0.18391097, 0.18106679,
                        0.17825139, 0.17547895, 0.17275316, 0.17008232, 0.16747954, 0.16495641,
                        0.16253136, 0.16020863, 0.15800481, 0.15592192, 0.15397283, 0.15217099,
                        0.15050673])

mean_error_avg = np.array([0.028134995629132267, 0.016455251456657768, 0.014743213390175258,
                           0.0066970065547930285, 0.0032726454643155745, 0.0017174343233870826])
upper_error_avg = np.array([0.030556598335120724, 0.018665475990593074, 0.016931657352149413,
                            0.008786826121979546, 0.005330713344092961, 0.0037475427520204875])
mean_error_01 = np.array([0.048541644864112886, 0.030815937716089370, 0.027433379145530457,
                          0.012674257595663874, 0.005877634321164282, 0.0023825084644830685])
upper_error_01 = np.array([0.049385873134685510, 0.031573935557073995, 0.028180269145823555,
                           0.013375876878720216, 0.006565842268107969, 0.0030643420177206004])


def plot_rBergomi_smiles_BFG_AK():
    """
    Plots the rBergomi implied volatility smiles, pre-exponential approach. Parameters used are
    H=0.07, T=0.9, number_time_steps=1000, eta=1.9, V_0=0.235**2, S_0=1, rho=-0.9.
    Plots both the BFG approximation of the smile and the AK approximations for m=1, and n in [2, 4, 8, 16, 32, 64].
    We have xi_0 = n^(-1/(0.5-H)) and xi_n = n^(1/H).
    10**6 samples are used for the MC estimates.
    """
    plt.plot(k_vec, rBergomi, "k", label="n=infinity")
    plt.plot(k_vec, rBergomi_2, label="n=2")
    plt.plot(k_vec, rBergomi_4, label="n=4")
    plt.plot(k_vec, rBergomi_8, label="n=8")
    plt.plot(k_vec, rBergomi_16, label="n=16")
    plt.plot(k_vec, rBergomi_32, label="n=32")
    plt.plot(k_vec, rBergomi_64, label="n=64")
    plt.legend(loc='upper right')
    plt.xlabel('Log-strike k')
    plt.ylabel('Implied volatility')
    plt.show()