import sys
import time

import matplotlib.pyplot as plt
import numpy as np
import qdarkstyle.style_rc
import werkzeug.http

import Data
import rBergomi
from functions import *
import rBergomiMarkov
import rHestonMomentMatching
from scipy.stats import norm
import scipy.special


nodes, weights = rk.quadrature_rule(H=0.1, N=10, T=1., mode='european')
print(nodes, weights)
nodes = 0.9 ** np.arange(10) * nodes
weights = rk.error_optimal_weights(H=0.1, T=1, nodes=nodes)[1]
print(nodes, weights)
time.sleep(36000)
params = {'T': log_linspace(0.004, 1, 25), 'K': np.exp(np.linspace(-1.25, 0.5, 351)[None, :] * np.sqrt(log_linspace(0.004, 1, 25))[:, None])}
approx_surface = rHestonMarkov_iv_eur_call(rHeston_params(params), N=10, mode='european alt', nodes=nodes, weights=weights,
                                    load=False, save=True, verbose=10)


filename = 'rHeston true, H=0.1, lambda=0.3, rho=-0.7, nu=0.3, theta=0.02, V_0=0.02, T=(0.004, 1.0, 25), K=(-1.5, 0.75, 25).npy'
surface = np.load(filename)[:, 50:-50]
#print(np.amax(np.abs(approx_surface - surface) / surface))

for i in range(10):
    filename = f'rHeston Markov {i + 1} dim european, H=0.1, lambda=0.3, rho=-0.7, nu=0.3, theta=0.02, V_0=0.02, T=(0.004, 1.0, 25), K=(-1.25, 0.5, 25).npy'
    approx_surface = np.load(filename)
    plt.loglog(log_linspace(0.004, 1, 25), np.amax(np.abs(approx_surface - surface) / surface, axis=-1), color=color(i, 10), label=f'N={i + 1}')

filename = f'rHeston Markov 10 dim european alt, H=0.1, lambda=0.3, rho=-0.7, nu=0.3, theta=0.02, V_0=0.02, T=(0.004, 1.0, 25), K=(-1.25, 0.5, 25).npy'
approx_surface = np.load(filename)
plt.loglog(log_linspace(0.004, 1, 25), np.amax(np.abs(approx_surface - surface) / surface, axis=-1), color='red', label=f'alt')
plt.legend(loc='best')
plt.show()

modes = ['paper', 'optimized', 'european']
for j in range(3):
    errors = np.empty(10)
    for i in range(10):
        filename = f'rHeston Markov {i + 1} dim {modes[j]}, H=0.1, lambda=0.3, rho=-0.7, nu=0.3, theta=0.02, V_0=0.02, T=(0.004, 1.0, 25), K=(-1.25, 0.5, 25).npy'
        approx_surface = np.load(filename)
        errors[i] = np.amax(np.abs(approx_surface - surface) / surface)
    plt.plot(np.arange(1, 11), errors, color=color(j, 3), label=modes[j])
plt.legend(loc='upper right')
plt.show()

params = {'T': log_linspace(0.004, 1, 25), 'K': np.exp(np.linspace(-1.25, 0.5, 351)[None, :] * np.sqrt(log_linspace(0.004, 1, 25))[:, None])}
for i in range(10):
    for mode in ['paper', 'optimized', 'european']:
        nodes, weights = rk.quadrature_rule(H=0.1, N=i + 1, T=params['T'], mode=mode)
        surface = rHestonMarkov_iv_eur_call(rHeston_params(params), N=i + 1, mode=mode, nodes=nodes, weights=weights, load=False, save=True, verbose=10)

filename = 'rHeston true, H=0.1, lambda=0.3, rho=-0.7, nu=0.3, theta=0.02, V_0=0.02, T=(0.004, 1.0, 25), K=(-1.5, 0.75, 25).npy'
surface = np.load(filename)
for i in range(25):
    plt.plot(np.linspace(-1.5, 0.75, 451) * np.sqrt(log_linspace(0.004, 1, 25)[i]), surface[i, :], color(i, 25))
plt.show()
# params = {'T': log_linspace(0.004, 1, 25)}
params = {'T': log_linspace(0.004, 1, 25), 'K': np.exp(np.linspace(-1.5, 0.75, 451)[None, :] * np.sqrt(log_linspace(0.004, 1, 25))[:, None])}
surface = rHeston_iv_eur_call(rHeston_params(params), load=False, save=True, verbose=10)
print((surface,))
print('Finished')
time.sleep(3600000)

for i in range(10):
    for mode in ['abi jaber', 'paper', 'optimized', 'european']:
        surface = 0

'''
# smile = Data.true_iv_surface_eur_call[-1, 150:]
T = 0.04
k_vec = np.linspace(-1.5, 0.75, 451) * np.sqrt(T)  # np.linspace(-0.1, 0.1, 3001) * np.sqrt(T)
params = {'rel_tol': 1e-05, 'K': np.exp(k_vec), 'T': T}
params = rHeston_params(params)
smile = rHeston_iv_eur_call(params=params, load=False, verbose=2)
h_vec = np.flip(k_vec[len(k_vec) // 2 + 1:])
h_vec_2 = np.array([k_vec[-i - 1] - k_vec[i] for i in range(len(k_vec) // 2)])
print(h_vec_2)
skew_approx = np.empty(len(k_vec) // 2)
for i in range(len(k_vec) // 2):
    skew_approx[i] = np.abs((smile[-i - 1] - smile[i]) / (2 * h_vec[i]))
print(2 * h_vec)
plt.plot(k_vec, smile)
plt.show()
alpha, C, _, _, _ = log_linear_regression(h_vec, skew_approx)
print(alpha, C)
plt.plot(h_vec, skew_approx)
plt.plot(h_vec, C * h_vec ** alpha)
plt.show()
'''
T = np.exp(np.linspace(np.log(0.004), np.log(1), 25))
skew = np.array([4.30365361, 3.89725263, 3.52734101, 3.19069485, 2.8843776 ,
       2.60570871, 2.35224616, 2.12176241, 1.91222756, 1.72179256,
       1.5487712 , 1.39162817, 1.24896587, 1.11951076, 1.00210337,
       0.8956886 , 0.79930542, 0.71207854, 0.63321086, 0.56197556,
       0.49770991, 0.43980871, 0.38771885, 0.3409341 , 0.29899042])
# skew = rHeston.skew_eur_call(S_0=1., H=0.1, lambda_=0.3, rho=-0.7, nu=0.3, theta=0.02, V_0=0.02, T=T, rel_tol=1e-04, verbose=3)
print((skew,))
'''
for i in range(9, 10):
    for mode in ['abi jaber', 'paper', 'optimized', 'european']:
        nodes, weights = rk.quadrature_rule(H=0.1, N=i + 1, T=T, mode=mode)
        skew_approx = rHestonMarkov.skew_eur_call(S_0=1., H=0.1, lambda_=0.3, rho=-0.7, nu=0.3, theta=0.02, V_0=0.02, T=T, rel_tol=1e-04, verbose=3, N=i + 1, nodes=nodes, weights=weights)
        print((skew_approx,))
        plt.plot(T, skew_approx, color=color(i, 6))
plt.plot(T, skew, color='k')
plt.show()
'''
skew_european = np.array([[3.62695003, 3.53218254, 3.39172541, 3.20706184, 2.98586125,
       2.73949611, 2.48023301, 2.21912229, 1.96481527, 1.72343779,
       1.49881935, 1.29303526, 1.10693513, 0.94052227, 0.79329579,
       0.66438475, 0.55267468, 0.45683556, 0.3754223 , 0.30690132,
       0.24972093, 0.20237058, 0.16342663, 0.13158646, 0.10568649],
                          [4.15438993, 3.91089896, 3.63096114, 3.32967007, 3.02211547,
                           2.72112575, 2.43625188, 2.17371545, 1.93681839, 1.7266678,
                           1.54273748, 1.38337325, 1.24613895, 1.12805227, 1.02578088,
                           0.93585081, 0.8549101, 0.78004979, 0.70916405, 0.64112586,
                           0.57573449, 0.51338771, 0.45467274, 0.40007763, 0.34987039],
                          [4.52444297, 4.08975325, 3.67443005, 3.28898478, 2.93916776,
                           2.62687391, 2.35110097, 2.1089621, 1.89634367, 1.70852772,
                           1.54077576, 1.38891396, 1.24982717, 1.12169475, 1.00385305,
                           0.89634197, 0.79935363, 0.71283984, 0.63630951, 0.56886123,
                           0.5093029, 0.45631349, 0.40861099, 0.36510876, 0.32502125],
                          [4.3544635, 3.9046367, 3.50981781, 3.16392027, 2.8594638,
                           2.58872411, 2.34460886, 2.12153357, 1.91591229, 1.72607663,
                           1.55163567, 1.39258668, 1.24860423, 1.11875311, 1.00160917,
                           0.8956259, 0.79945499, 0.7121609, 0.63320288, 0.56225581,
                           0.49898884, 0.44291182, 0.3933355, 0.34942398, 0.310295],
                          [4.27838326, 3.88741985, 3.52897341, 3.19773941, 2.89150921,
                           2.60997605, 2.35325924, 2.12072314, 1.91072873, 1.72088067,
                           1.54866669, 1.3919797 , 1.24931392, 1.11961882, 1.00202452,
                           0.8955839 , 0.79927273, 0.71210165, 0.63322914, 0.56196871,
                           0.49770392, 0.43979505, 0.38755685, 0.34031102, 0.29747142],
                          [4.31038592, 3.89864208, 3.52541887, 3.18812208, 2.88288752,
                           2.60562327, 2.35291481, 2.12236869, 1.91237836, 1.72160912,
                           1.5485589, 1.3915824, 1.24904688, 1.11958864, 1.00210038,
                           0.89563697, 0.79927547, 0.71209188, 0.63323218, 0.56197117,
                           0.4976917, 0.43980779, 0.38770173, 0.34072937, 0.29828181],
                          [4.30161505, 3.89732749, 3.52845975, 3.19160077, 2.88450685,
                           2.60530094, 2.35185501, 2.12170996, 1.91243153, 1.72198703,
                           1.54877594, 1.39150158, 1.24886837, 1.11952288, 1.00218359,
                           0.89573756, 0.79928223, 0.71202335, 0.63318372, 0.56199095,
                           0.49773412, 0.4398084, 0.38769971, 0.34092659, 0.29899151],
                          [4.30289662, 3.89717573, 3.52778521, 3.19109974, 2.88437905,
                           2.60540773, 2.35199174, 2.12177321, 1.91243611, 1.7219523,
                           1.5487519, 1.39149639, 1.24887532, 1.11953062, 1.00218588,
                           0.89573531, 0.79927894, 0.71202189, 0.6331846, 0.5619925,
                           0.49773469, 0.43980799, 0.38769926, 0.34092659, 0.29899165],
                          [4.30313131, 3.89732134, 3.52779892, 3.19103701, 2.8843166,
                           2.60538573, 2.35200789, 2.12179995, 1.91244894, 1.72194617,
                           1.54873843, 1.39148957, 1.24887821, 1.1195381, 1.00219002,
                           0.89573408, 0.79927529, 0.7120201, 0.63318532, 0.56199419,
                           0.49773539, 0.43980748, 0.38769871, 0.34092659, 0.2989918],
                          [4.30328547, 3.89754898, 3.52788941, 3.19095473, 2.88417863,
                           2.60532294, 2.35205174, 2.1218812, 1.91248653, 1.72192207,
                           1.54869145, 1.39146685, 1.24889065, 1.11956286, 1.00220198,
                           0.89572752, 0.79926232, 0.71201391, 0.63318851, 0.562,
                           0.49773769, 0.43980563, 0.38769632, 0.34092667, 0.29899238]
                          ])

skew_abi_jaber = np.array([[0.95084298, 0.94988527, 0.94862829, 0.94696528, 0.94474616,
       0.94175134, 0.93765697, 0.9319592 , 0.92384433, 0.91201522,
       0.89464554, 0.86966463, 0.83541153, 0.79131328, 0.73823658,
       0.6782358 , 0.61401324, 0.54834972, 0.48365084, 0.42176285,
       0.36396041, 0.31103274, 0.26338879, 0.22115086, 0.18422696],
                           [0.95178173, 0.95084712, 0.94962637, 0.94802518, 0.94590439,
                            0.94307045, 0.93923658, 0.93396266, 0.92653442, 0.9158029,
                            0.90014104, 0.87769883, 0.84698424, 0.80751074, 0.75999524,
                            0.70617926, 0.64830167, 0.58857796, 0.5288717, 0.47060037,
                            0.41480039, 0.36222244, 0.3134201, 0.2687692, 0.22848188],
                           [0.75093737, 0.75049586, 0.74992843, 0.74919434, 0.74823732,
                            0.74698549, 0.74533284, 0.74313154, 0.74016571, 0.73610495,
                            0.73041522, 0.72223618, 0.71033076, 0.69326437, 0.66985154,
                            0.63964361, 0.60315926, 0.56176293, 0.51723329, 0.47135587,
                            0.42562257, 0.3811217, 0.3385712, 0.29841826, 0.26094225],
                           [0.68515119, 0.68480828, 0.68436998, 0.68380622, 0.68307615,
                            0.68212611, 0.68088307, 0.67924211, 0.67705596, 0.67410936,
                            0.67006994, 0.66439885, 0.65624396, 0.64442701, 0.62766051,
                            0.6049833, 0.57617597, 0.54190559, 0.50353013, 0.46273107,
                            0.4211118, 0.37997455, 0.34023999, 0.30248725, 0.26704627],
                           [0.61233358, 0.61207605, 0.61174906, 0.61132953, 0.61078991,
                            0.61009321, 0.60918888, 0.60800582, 0.60644888, 0.6043803,
                            0.6016014, 0.59780479, 0.59249885, 0.58491366, 0.57399586,
                            0.55861132, 0.5379331, 0.51180347, 0.48085383, 0.44632606,
                            0.40973056, 0.37251165, 0.3358431, 0.30054781, 0.26714006],
                           [0.56034335, 0.5601353, 0.55987044, 0.55953195, 0.55909827,
                            0.55854202, 0.55782314, 0.55689047, 0.55567167, 0.55406805,
                            0.55193905, 0.54907831, 0.54516848, 0.53970261, 0.53191102,
                            0.52079624, 0.50536713, 0.48500472, 0.45975217, 0.43035248,
                            0.39803751, 0.36420491, 0.33013643, 0.29683563, 0.264993],
                           [0.47213183, 0.47198891, 0.47180567, 0.47157383, 0.47127876,
                            0.47090189, 0.4704205, 0.46980242, 0.46900423, 0.46796999,
                            0.46662057, 0.46484776, 0.46249708, 0.45934017, 0.45502489,
                            0.44900762, 0.44053671, 0.42876813, 0.41303545, 0.39313476,
                            0.36945559, 0.34288827, 0.3145807, 0.28567965, 0.25714813],
                           [0.49271763, 0.49256094, 0.49236152, 0.49210793, 0.49178477,
                            0.49137194, 0.49084184, 0.49016042, 0.48927872, 0.48813158,
                            0.48662921, 0.48464665, 0.48200173, 0.47841969, 0.47347013,
                            0.4665027, 0.45666858, 0.44310737, 0.42525784, 0.40311992,
                            0.37730679, 0.34887687, 0.31905818, 0.2889965, 0.25960413],
                           [0.51161804, 0.51144821, 0.51123196, 0.51095645, 0.51060536,
                            0.5101559, 0.50957856, 0.50883379, 0.50786829, 0.50660789,
                            0.5049518, 0.50275508, 0.4998075, 0.495782, 0.49016454,
                            0.48220302, 0.47097626, 0.45564518, 0.43578328, 0.41159419,
                            0.38388724, 0.35385056, 0.32275713, 0.2917315, 0.26162983],
                           [0.52913679, 0.52895321, 0.52872042, 0.52842326, 0.52804553,
                            0.52755926, 0.5269347, 0.52612695, 0.52507683, 0.52370249,
                            0.52188986, 0.51947525, 0.51621501, 0.51172622, 0.505409,
                            0.49641712, 0.4837828, 0.46671979, 0.44495446, 0.41888606,
                            0.38949239, 0.35805746, 0.32587463, 0.29403525, 0.26333844]
                           ])
skew_paper = np.array([[1.59304171, 1.60086588, 1.61080545, 1.62335135, 1.63888245,
       1.65688093, 1.6749977 , 1.68859915, 1.69135101, 1.67709666,
       1.64185825, 1.58481149, 1.50817756, 1.41623422, 1.31416072,
       1.20699724, 1.09905995, 0.99367052, 0.89313859, 0.79888666,
       0.71163379, 0.63158524, 0.55860126, 0.49233466, 0.43233442],
                       [1.30230737, 1.29822251, 1.29663728, 1.29747388, 1.3007791,
                        1.30665956, 1.31503137, 1.32519941, 1.33499525, 1.34057922,
                        1.33700739, 1.31970957, 1.28594416, 1.23548699, 1.17045236,
                        1.09440165, 1.01144521, 0.9254844, 0.83976812, 0.75672389,
                        0.67797823, 0.60447613, 0.53663826, 0.47452146, 0.41794512],
                       [2.42948249, 2.12672948, 1.87652523, 1.67153581, 1.50481022,
                        1.37005032, 1.26172832, 1.17509304, 1.10610846, 1.05130419,
                        1.00768915, 0.97239116, 0.94245217, 0.91460402, 0.88545443,
                        0.85195673, 0.812181, 0.76572113, 0.71358272, 0.65764751,
                        0.60007607, 0.54284023, 0.48748228, 0.43505041, 0.38614839],
                       [3.54724249, 3.28800982, 3.01338808, 2.73244272, 2.45534242,
                        2.19121695, 1.94691928, 1.72666325, 1.53226643, 1.36366359,
                        1.21952033, 1.09767688, 0.99549483, 0.91008699, 0.83846809,
                        0.77763494, 0.72464679, 0.67667399, 0.63121371, 0.58637441,
                        0.54114306, 0.49541491, 0.44976776, 0.40508494, 0.36222424],
                       [3.05856632, 2.84058185, 2.65419172, 2.48993181, 2.33883817,
                        2.19299366, 2.04637095, 1.89577621, 1.74120646, 1.58529113,
                        1.43205761, 1.28564147, 1.14939512, 1.02549949, 0.91495427,
                        0.81777359, 0.73323775, 0.66012019, 0.59686723, 0.5417426,
                        0.49296618, 0.44887443, 0.40807689, 0.36960671, 0.33297692],
                       [3.5057902, 3.13423636, 2.80741736, 2.52463651, 2.28269662,
                        2.07683293, 1.90140065, 1.75035297, 1.61758951, 1.49731169,
                        1.38448152, 1.27538288, 1.1680758, 1.06243954, 0.95970661,
                        0.86171178, 0.77020429, 0.68643256, 0.61101669, 0.54398338,
                        0.48489862, 0.43300421, 0.38734374, 0.34688016, 0.31061121],
                       [3.64325507, 3.35175115, 3.06870424, 2.79278714, 2.52632012,
                        2.27367128, 2.03942653, 1.8270247, 1.63809868, 1.47247791,
                        1.32854765, 1.20371388, 1.09481272, 0.9984659, 0.91141559,
                        0.83088113, 0.75488162, 0.68241249, 0.61336146, 0.54820319,
                        0.48759319, 0.43207128, 0.38190934, 0.3370878, 0.29734234],
                       [3.60992136, 3.30107884, 3.02658349, 2.77712485, 2.54484517,
                        2.32429043, 2.1129611, 1.91110192, 1.720761, 1.54452141,
                        1.38442653, 1.24139658, 1.11512427, 1.00428806, 0.90688324,
                        0.82055855, 0.74293667, 0.67191964, 0.60594599, 0.54413559,
                        0.48622585, 0.43236482, 0.38283851, 0.33785944, 0.29746356],
                       [3.73908473, 3.37650896, 3.05708548, 2.77674846, 2.52957187,
                        2.3088353, 2.10801226, 1.92168743, 1.74627405, 1.58028883,
                        1.42403413, 1.27879202, 1.14592794, 1.02623316, 0.91964982,
                        0.82532063, 0.74181155, 0.66739464, 0.60032643, 0.53910622,
                        0.48264854, 0.43035441, 0.38202857, 0.33770271, 0.29745017],
                       [3.86369125, 3.49378762, 3.15329034, 2.84493666, 2.56956363,
                        2.32568915, 2.10988784, 1.91757253, 1.74385622, 1.58437108,
                        1.43593079, 1.2968628, 1.16688294, 1.04655979, 0.93663799,
                        0.83750763, 0.74896128, 0.67021586, 0.60008877, 0.53724113,
                        0.48039339, 0.42851732, 0.38093079, 0.33728273, 0.29744544]
                       ])
skew_optimized = np.array([[3.62695003, 3.53218254, 3.39172541, 3.20706184, 2.98586125,
       2.73949611, 2.48023301, 2.21912229, 1.96481527, 1.72343779,
       1.49881935, 1.29303526, 1.10693513, 0.94052227, 0.79329579,
       0.66438475, 0.55267468, 0.45683556, 0.3754223 , 0.30690132,
       0.24972093, 0.20237058, 0.16342663, 0.13158646, 0.10568649],
                           [3.63426906, 3.3372045, 3.08734618, 2.8723589, 2.68047573,
                            2.50090534, 2.3247281, 2.14619108, 1.96331094, 1.77759002,
                            1.59267659, 1.41280947, 1.24168953, 1.08197346, 0.9352485,
                            0.80222386, 0.68300391, 0.57728441, 0.48448089, 0.40383843,
                            0.33446256, 0.27536003, 0.22547801, 0.18374217, 0.14909761],
                           [4.32431073, 3.84545134, 3.41744353, 3.0414489, 2.71551581,
                            2.43565437, 2.19650471, 1.99186851, 1.81511233, 1.65953427,
                            1.51880286, 1.3875111, 1.261776, 1.13961872, 1.02085478,
                            0.90651579, 0.79805795, 0.69679194, 0.60360238, 0.51892745,
                            0.44284088, 0.37517686, 0.31560256, 0.2636729, 0.21885156],
                           [4.36039626, 3.98111993, 3.61003878, 3.2524446, 2.91510357,
                            2.60395076, 2.32282252, 2.07309481, 1.85407219, 1.66345391,
                            1.49787217, 1.35331155, 1.22548484, 1.11023017, 1.00394499,
                            0.90402197, 0.80904086, 0.7186913, 0.63338046, 0.55376265,
                            0.48039846, 0.41360962, 0.35347204, 0.29988049, 0.25259898],
                           [4.16026172, 3.80343975, 3.482938, 3.18763734, 2.90925,
                            2.6432352, 2.38879768, 2.14784177, 1.923389, 1.71808945,
                            1.53345801, 1.3695919, 1.2253558, 1.09870963, 0.98707727,
                            0.88764575, 0.79771389, 0.71501257, 0.63795771, 0.5657311,
                            0.49814402, 0.43536108, 0.37762821, 0.32510662, 0.27782262],
                           [4.24138429, 3.81718452, 3.44564956, 3.12073879, 2.83480126,
                            2.5796535, 2.3476227, 2.13254795, 1.93053111, 1.74011771,
                            1.56176617, 1.39681249, 1.24654862, 1.11155181, 0.99152044,
                            0.88534595, 0.79137426, 0.7076722, 0.6322984, 0.56355524,
                            0.50018535, 0.44144585, 0.38703621, 0.3369225, 0.29115523],
                           [4.35314395, 3.93646686, 3.5466721, 3.18803002, 2.86366463,
                            2.57441462, 2.31872233, 2.09309079, 1.89293349, 1.71330654,
                            1.54967177, 1.39855228, 1.25790232, 1.12704783, 1.00623737,
                            0.89597441, 0.79653015, 0.7076875, 0.62873343, 0.55858924,
                            0.49599676, 0.43970473, 0.38863292, 0.34197977, 0.29924595],
                           [4.31538224, 3.92405822, 3.55655152, 3.21214954, 2.89268849,
                            2.60060964, 2.33735751, 2.10261029, 1.89424164, 1.70891339,
                            1.54271308, 1.39187615, 1.25338347, 1.12532184, 1.00690764,
                            0.89809944, 0.7991091, 0.70996619, 0.63030604, 0.55936815,
                            0.49612056, 0.43943307, 0.38824627, 0.34170215, 0.29920659],
                           [4.28185756, 3.89518641, 3.53966995, 3.20918409, 2.90094129,
                            2.61488288, 2.35228943, 2.11428494, 1.9008484, 1.71048427,
                            1.54058931, 1.38797753, 1.24953294, 1.12273839, 1.00600223,
                            0.89860653, 0.80041447, 0.71143704, 0.63149417, 0.56006973,
                            0.49634303, 0.43932016, 0.38799589, 0.34149653, 0.29916751],
                           [4.27834875, 3.87515066, 3.51453222, 3.18901415, 2.89159562,
                            2.61701623, 2.36237288, 2.12689858, 1.91105737, 1.71536319,
                            1.53963012, 1.38262767, 1.24228437, 1.11612376, 1.00178041,
                            0.89735839, 0.80165117, 0.7140688, 0.63437577, 0.56238112,
                            0.4977249, 0.43982083, 0.38792079, 0.34123727, 0.29906165]
                           ])
'''
skew_european = np.array([[5.14425204, 5.11963742, 5.04967637, 4.90184444, 4.65810279,
       4.32053688, 3.91069053, 3.46258142, 3.03071101, 2.56656226,
       2.15921498, 1.7924031 , 1.46918191, 1.18988218, 0.95305731,
       0.75518539, 0.5925662 , 0.4609844 , 0.35597844, 0.27319121,
       0.20859296, 0.15861829, 0.12022567, 0.09089457, 0.06858409],
                          [6.02840459, 5.89034285, 5.65544929, 5.31479528, 4.88472775,
                           4.39942062, 3.89716116, 3.41276678, 2.9911389, 2.57472421,
                           2.23694753, 1.95388226, 1.71970516, 1.5270272, 1.36702857,
                           1.2303203, 1.10775425, 0.99285025, 0.88170249, 0.77407053,
                           0.67171186, 0.57656968, 0.49019637, 0.41289979, 0.34454701],
                          [7.3547824, 6.87958056, 6.29756176, 5.65517293, 5.00243032,
                           4.37926159, 3.81383678, 3.31701258, 2.89000709, 2.52664563,
                           2.21839127, 1.95318156, 1.72023317, 1.51153228, 1.32252904,
                           1.15296558, 1.00304937, 0.87298311, 0.76155157, 0.66673859,
                           0.58519851, 0.51363714, 0.44927144, 0.39031458, 0.33605837],
                          [8.16590797, 7.20972662, 6.30976725, 5.50042301, 4.79480453,
                           4.19358609, 3.68412939, 3.27762878, 2.87434741, 2.5410957,
                           2.2414699, 1.97014764, 1.72630425, 1.50978851, 1.31889194,
                           1.15127215, 1.00308239, 0.87155591, 0.75502627, 0.65312156,
                           0.56493834, 0.48925633, 0.42429183, 0.36798121, 0.31838721],
                          [7.83770182, 6.86270939, 6.08469553, 5.33561382, 4.73048762,
                           4.19841352, 3.71998892, 3.31496413, 2.89414893, 2.54414209,
                           2.23568278, 1.96406294, 1.72384235, 1.51032264, 1.32008472,
                           1.15170125, 1.00286599, 0.87139511, 0.75506363, 0.65254318,
                           0.56225679, 0.48283148, 0.41278508, 0.35070729, 0.29552382],
                          [7.69627717, 6.84569774, 6.13607712, 5.39478908, 4.76871755,
                           4.20870312, 3.71249265, 3.30382205, 2.88858573, 2.54431284,
                           2.23790482, 1.9653474, 1.72372881, 1.50980676, 1.3199063,
                           1.1518062, 1.00294019, 0.87136971, 0.75504819, 0.65256096,
                           0.56224573, 0.48286437, 0.41316974, 0.35183801, 0.29764604]
                          ])
'''
for i in range(10):
    plt.loglog(T, np.abs(skew - skew_european[i, :]) / skew, color=color(i, 10))
plt.show()

for i in range(10):
    plt.plot(T, skew_european[i, :], color=color(i, 10), label=f'N={i+1}')
plt.plot(T, skew, 'k-', label='True skew')
plt.legend(loc='upper right')
plt.title('Skew for rough Heston, comparison with approximation\nusing european nodes')
plt.xlabel('Maturity T')
plt.ylabel('Skew')
plt.show()

skew_abi_jaber_errors = np.amax(np.abs(skew[None, :] - skew_abi_jaber) / skew[None, :], axis=1)
print(skew_abi_jaber_errors)
skew_paper_errors = np.amax(np.abs(skew[None, :] - skew_paper) / skew[None, :], axis=1)
print(skew_paper_errors)
skew_optimized_errors = np.amax(np.abs(skew[None, :] - skew_optimized) / skew[None, :], axis=1)
print(skew_optimized_errors)
skew_european_errors = np.amax(np.abs(skew[None, :] - skew_european) / skew[None, :], axis=1)
print(skew_european_errors)
plt.plot(np.arange(1, 11), skew_abi_jaber_errors, 'brown', label='Abi Jaber, El Euch')
plt.plot(np.arange(1, 11), skew_paper_errors, 'b-', label='paper')
plt.plot(np.arange(1, 11), skew_optimized_errors, 'r-', label='optimized')
plt.plot(np.arange(1, 11), skew_european_errors, 'g-', label='european')
plt.plot(np.arange(1, 11), np.ones(10) * 2e-04, 'k--', label='discretization error')
plt.yscale('log')
plt.title('Maximal relative error of the skew')
plt.xlabel('Number of dimensions')
plt.ylabel('Relative error')
plt.legend(loc='best')
plt.show()

time.sleep(360000)


'''
nodes, weights = rk.quadrature_rule(H=0.1, N=3, T=1., mode='european')
print(nodes, weights)
V_0 = 0.02
V_0_vec = V_0 / (len(weights) * weights)
nu = 0.3
lambda_ = 0.3
theta = 0.02 * lambda_
V = V_0_vec * np.array([0.5, 1, 3])
dt = 0.05
tic = time.perf_counter()
moments_full, moments_1d = rHestonMomentMatching.first_five_moments_V(nodes=nodes, weights=weights, lambda_=lambda_, theta=theta, nu=nu, V_0=V_0_vec, dt=dt)
toc = time.perf_counter()
print(toc - tic)
tic = time.perf_counter()
moms = moments_full(V)
print(time.perf_counter() - tic)
tic = time.perf_counter()
moms_simple = moments_1d(V)
print(time.perf_counter() - tic)
print(moms[0], moms[1] - moms[0][:, None] * moms[0][None, :], moms[2][0, 1, 2], moms[3][0, 0, 1, 2], moms[4][0, 0, 1, 1, 2])
print(moms_simple)

moms_resc = np.array([moms_simple[0], moms_simple[1] ** 0.5, moms_simple[2] ** (1/3), moms_simple[3] ** (1/4), moms_simple[4] ** (1/5)])
A = np.array([moms_resc ** i for i in range(1, 6)])
b = np.array(moms_simple)
print(A, b, np.linalg.solve(A, b))

time.sleep(360000)
mean_func = rHestonMomentMatching.mean_V(nodes=nodes, weights=weights, lambda_=lambda_, theta=theta, V_0=V_0_vec, dt=dt)
tic = time.perf_counter()
cov_func = rHestonMomentMatching.cov_V(nodes=nodes, weights=weights, lambda_=lambda_, theta=theta, nu=nu, V_0=V_0_vec, dt=dt)
print(f'Benchmark: {time.perf_counter() - tic}')
print(V_0_vec, weights @ V_0_vec)
print(V, weights @ V)
print(mean_func(V), weights @ mean_func(V))
print(cov_func(V))
time.sleep(360000)
'''

def illustrate_Markovian_approximation(H=0.3, N_small=2, N_large=4, T=1., n=10000):
    nodes, weights = rk.quadrature_rule(H=H, N=N_small, T=T, mode='optimized')
    print(nodes, weights)
    nodes = np.array([1., 400])
    weights = np.array([1.6, 8])
    exact_nodes, exact_weights = rk.quadrature_rule(H=H, N=N_large, T=T, mode="optimized")
    print(exact_nodes, exact_weights)
    dt = T / n

    B = np.random.normal(0, np.sqrt(dt), n)
    exp_nodes = np.exp(-nodes * dt)
    div_nodes = (1 - np.exp(-2 * nodes * dt)) / (2 * nodes * dt)
    OU_1 = np.zeros((N_small, n + 1))
    for i in range(n):
        OU_1[:, i + 1] = exp_nodes * OU_1[:, i] + div_nodes * B[i]

    exp_nodes = np.exp(-exact_nodes * dt)
    div_nodes = (1 - np.exp(-2 * exact_nodes * dt)) / (2 * exact_nodes * dt)
    OU_2 = np.zeros((N_large, n + 1))
    for i in range(n):
        OU_2[:, i + 1] = exp_nodes * OU_2[:, i] + div_nodes * B[i]

    exact_fBm = np.einsum('i,ij->j', exact_weights, OU_2)
    approx_fBm = np.einsum('i,ij->j', weights, OU_1)

    time_vec = np.linspace(0, T, n + 1)
    BM = np.zeros(n + 1)
    BM[1:] = np.cumsum(B)
    plt.plot(time_vec, exact_fBm, 'k-', label='Fractional Brownian motion')
    plt.plot(time_vec, approx_fBm, 'g-', label='Markovian approximation')
    plt.plot(time_vec, weights[0] * OU_1[0, :], 'b-', label='Slow component')
    plt.plot(time_vec, weights[-1] * OU_1[-1, :], 'r-', label='Fast component')
    # plt.plot(time_vec, BM, color='grey', label='Underlying Brownian motion')
    plt.legend(loc='best')
    plt.show()

"""
largest_node = np.empty(10)
for i in range(1, 7):
    largest_node[i-1] = rk.quadrature_rule(H=0.1, T=1., N=i, mode='european')[0][-1]
print(largest_node)
time.sleep(36000)
"""
'''
params = rHeston_params('simple')
params['T'] = 0.04
params['K'] = np.exp(np.sqrt(params['T']) * np.log(params['K']))
# true_smile = rHeston_iv_eur_call(params, load=False, verbose=2)
# print((true_smile,))
true_smile = np.array([0.39928947, 0.39868438, 0.39807835, 0.39747139, 0.3968635 ,
       0.39625466, 0.39564488, 0.39503415, 0.39442247, 0.39380982,
       0.39319622, 0.39258165, 0.3919661 , 0.39134958, 0.39073208,
       0.3901136 , 0.38949412, 0.38887365, 0.38825218, 0.3876297 ,
       0.38700621, 0.38638171, 0.38575619, 0.38512965, 0.38450208,
       0.38387347, 0.38324382, 0.38261313, 0.38198139, 0.3813486 ,
       0.38071474, 0.38007982, 0.37944383, 0.37880676, 0.37816861,
       0.37752937, 0.37688904, 0.37624761, 0.37560508, 0.37496144,
       0.37431669, 0.37367081, 0.37302381, 0.37237567, 0.3717264 ,
       0.37107598, 0.37042441, 0.36977168, 0.36911779, 0.36846273,
       0.3678065 , 0.36714909, 0.36649049, 0.36583069, 0.36516969,
       0.36450749, 0.36384407, 0.36317944, 0.36251357, 0.36184648,
       0.36117814, 0.36050855, 0.35983771, 0.35916561, 0.35849224,
       0.3578176 , 0.35714167, 0.35646445, 0.35578594, 0.35510612,
       0.35442499, 0.35374254, 0.35305876, 0.35237365, 0.35168719,
       0.35099939, 0.35031022, 0.34961969, 0.34892779, 0.3482345 ,
       0.34753982, 0.34684375, 0.34614626, 0.34544736, 0.34474704,
       0.34404528, 0.34334208, 0.34263743, 0.34193132, 0.34122374,
       0.34051468, 0.33980414, 0.3390921 , 0.33837855, 0.33766349,
       0.33694691, 0.33622879, 0.33550913, 0.33478792, 0.33406514,
       0.33334079, 0.33261485, 0.33188732, 0.33115818, 0.33042743,
       0.32969506, 0.32896105, 0.32822539, 0.32748807, 0.32674908,
       0.32600842, 0.32526606, 0.32452199, 0.32377622, 0.32302871,
       0.32227947, 0.32152848, 0.32077573, 0.3200212 , 0.31926488,
       0.31850676, 0.31774683, 0.31698508, 0.31622149, 0.31545604,
       0.31468873, 0.31391955, 0.31314847, 0.31237549, 0.31160058,
       0.31082375, 0.31004496, 0.30926422, 0.30848149, 0.30769678,
       0.30691006, 0.30612132, 0.30533054, 0.30453771, 0.3037428 ,
       0.30294582, 0.30214673, 0.30134553, 0.3005422 , 0.29973671,
       0.29892906, 0.29811923, 0.29730719, 0.29649293, 0.29567644,
       0.29485769, 0.29403667, 0.29321335, 0.29238773, 0.29155977,
       0.29072947, 0.28989679, 0.28906173, 0.28822426, 0.28738436,
       0.28654201, 0.28569719, 0.28484987, 0.28400004, 0.28314768,
       0.28229276, 0.28143526, 0.28057515, 0.27971242, 0.27884704,
       0.27797898, 0.27710823, 0.27623475, 0.27535853, 0.27447953,
       0.27359774, 0.27271312, 0.27182565, 0.27093531, 0.27004205,
       0.26914587, 0.26824673, 0.2673446 , 0.26643945, 0.26553125,
       0.26461998, 0.2637056 , 0.26278808, 0.26186739, 0.2609435 ,
       0.26001638, 0.25908599, 0.25815231, 0.25721529, 0.2562749 ,
       0.25533111, 0.25438389, 0.25343319, 0.25247898, 0.25152122,
       0.25055987, 0.2495949 , 0.24862627, 0.24765393, 0.24667785,
       0.24569799, 0.24471429, 0.24372673, 0.24273525, 0.24173982,
       0.24074038, 0.23973689, 0.23872931, 0.23771759, 0.23670167,
       0.23568152, 0.23465707, 0.23362828, 0.23259511, 0.23155748,
       0.23051536, 0.22946868, 0.2284174 , 0.22736145, 0.22630077,
       0.22523532, 0.22416502, 0.22308981, 0.22200965, 0.22092445,
       0.21983416, 0.21873872, 0.21763804, 0.21653208, 0.21542075,
       0.214304  , 0.21318173, 0.21205389, 0.2109204 , 0.20978119,
       0.20863617, 0.20748527, 0.2063284 , 0.2051655 , 0.20399647,
       0.20282123, 0.2016397 , 0.20045179, 0.19925741, 0.19805648,
       0.1968489 , 0.19563458, 0.19441344, 0.19318537, 0.19195028,
       0.19070808, 0.18945866, 0.18820194, 0.18693781, 0.18566618,
       0.18438694, 0.18309999, 0.18180525, 0.18050259, 0.17919194,
       0.17787319, 0.17654625, 0.17521102, 0.17386741, 0.17251533,
       0.17115469, 0.16978542, 0.16840744, 0.16702067, 0.16562506,
       0.16422056, 0.16280711, 0.16138469, 0.15995328, 0.15851288,
       0.15706351, 0.15560519, 0.15413801, 0.15266203, 0.1511774 ,
       0.14968426, 0.14818283, 0.14667336, 0.14515615, 0.14363159,
       0.14210011, 0.14056225, 0.13901863, 0.13747001, 0.13591722,
       0.13436129, 0.13280335, 0.13124477, 0.12968706, 0.128132  ,
       0.12658158, 0.1250381 , 0.12350412, 0.12198252, 0.12047654,
       0.11898973, 0.11752601, 0.11608962, 0.11468513, 0.11331735,
       0.1119913 , 0.11071211, 0.10948488, 0.10831459, 0.10720591,
       0.10616304, 0.10518961, 0.10428851, 0.10346181, 0.10271071,
       0.1020355 , 0.10143563, 0.10090975, 0.10045583, 0.10007126,
       0.099753  , 0.09949768, 0.09930171, 0.09916142, 0.09907311,
       0.09903313, 0.09903792, 0.0990841 , 0.09916842, 0.09928782,
       0.09943946, 0.09962066, 0.09982895, 0.10006206, 0.10031786,
       0.10059442, 0.10088996, 0.10120284, 0.10153156, 0.10187475,
       0.10223114, 0.10259959, 0.10297903, 0.1033685 , 0.10376712,
       0.10417407, 0.10458861, 0.10501005, 0.10543776, 0.10587119,
       0.10630978, 0.10675306, 0.10720059, 0.10765194, 0.10810674,
       0.10856465, 0.10902534, 0.10948852, 0.10995391, 0.11042126,
       0.11089033, 0.11136092, 0.11183281, 0.11230584, 0.11277982,
       0.11325461, 0.11373004, 0.114206  , 0.11468235, 0.11515897,
       0.11563577, 0.11611263, 0.11658948, 0.11706621, 0.11754276,
       0.11801905, 0.11849501, 0.11897057, 0.11944568, 0.11992029,
       0.12039434, 0.12086779, 0.12134059, 0.12181271, 0.1222841 ,
       0.12275473, 0.12322458, 0.1236936 , 0.12416178, 0.12462909,
       0.12509551, 0.12556101, 0.12602558, 0.1264892 , 0.12695185,
       0.12741352, 0.12787419, 0.12833386, 0.1287925 , 0.12925012,
       0.1297067 , 0.13016223, 0.13061671, 0.13107013, 0.13152248,
       0.13197376, 0.13242397, 0.1328731 , 0.13332115, 0.13376812,
       0.134214  , 0.1346588 , 0.1351025 , 0.13554512, 0.13598665,
       0.13642709, 0.13686645, 0.13730472, 0.1377419 , 0.138178  ,
       0.13861302, 0.13904696, 0.13947982, 0.13991161, 0.14034232,
       0.14077196, 0.14120054, 0.14162806, 0.14205451, 0.14247991,
       0.14290426, 0.14332756, 0.14374982, 0.14417103, 0.14459121,
       0.14501035, 0.14542847, 0.14584556, 0.14626164, 0.1466767 ,
       0.14709075, 0.14750379, 0.14791583, 0.14832688, 0.14873694,
       0.149146  ])
'''
'''
for i in range(6):
    our_approx = rHestonMarkov_iv_eur_call(params=params, N=i+1, mode='paper', load=True, verbose=1)
    plt.plot(np.log(params['K']), our_approx, color=color(i, 6), label=f'N={i+1}')
plt.plot(np.log(params['K']), true_smile, 'k-', label='True smile')
plt.legend(loc='best')
plt.xlabel('Log-moneyness')
plt.ylabel('Implied volatility')
plt.show()
'''
'''
params['rel_tol'] = 1e-03
for i in range(6):
    plt.plot(np.log(params['K']), rHestonMarkov_iv_eur_call(params=params, N=4 ** i, mode='abi jaber', verbose=1), color=color(i, 6), label=f'Abi Jaber, El Euch, N={4 ** i}')
plt.plot(np.log(params['K']), rHestonMarkov_iv_eur_call(params=params, N=6, mode='paper', verbose=1), color='brown', label='Our approximation, N=6')
plt.plot(np.log(params['K']), true_smile, 'k-', label='True smile')
plt.legend(loc='best')
plt.xlabel('Log-moneyness')
plt.ylabel('Implied volatility')
plt.show()
'''
'''
for i in range(6):
    errors = np.abs(rHestonMarkov_iv_eur_call(params=params, N=i+1, mode='european', load=True, verbose=1) - true_smile)/true_smile
    plt.plot(np.log(params['K']), errors, color=color(i, 6), label=f'N={i+1}')
plt.plot(np.log(params['K']), 2e-05 * np.ones(len(params['K'])), 'k--', label='Discretization error')
plt.plot(np.log(params['K']), 2e-08 * np.ones(len(params['K'])), 'k:')

plt.legend(loc='best')
plt.xlabel('Log-moneyness')
plt.ylabel('Relative error of implied volatility')
plt.title('Relative error of implied volatility using bounded nodes')
plt.show()
'''
'''
errors = np.empty((4, 6))
modes = ['abi jaber', 'paper', 'optimized', 'european']
for i in range(len(modes)):
    for j in range(6):
        print(i, j)
        time.sleep(60)
        errors[i, j] = np.amax(np.abs(rHestonMarkov_iv_eur_call(params=params, N=j+1, mode=modes[i], load=True, verbose=1) - true_smile) / true_smile)
plt.plot(np.arange(1, 7), errors[0, :], 'k-', label='Abi Jaber, El Euch')
plt.plot(np.arange(1, 7), errors[1, :], 'b-', label='Paper')
plt.plot(np.arange(1, 7), errors[2, :], 'r-', label='Optimized')
plt.plot(np.arange(1, 7), errors[3, :], 'g-', label='Bounded')
plt.plot(np.arange(1, 7), 2e-05 * np.ones(6), 'k--', label='Discretization error')
plt.xlabel('Number of nodes N')
plt.ylabel('Maximal relative error of implied volatility')
plt.legend(loc='upper right')
plt.show()
'''
'''
illustrate_Markovian_approximation(H=0.2, T=1., n=300)
print('Finished')
time.sleep(360000)
'''

'''
T = 1.
k = np.linspace(-0.4, 0.4, 301) * np.sqrt(T)
tic = time.perf_counter()
smile, lower, upper = rBergomi.implied_volatility(K=np.exp(k), rel_tol=9e-02, T=T, verbose=1)
total = np.empty((3, len(smile)))
total[0, :] = smile
total[1, :] = lower
total[2, :] = upper
# np.save('rBergomi actual.npy', total)
print(time.perf_counter() - tic)
# print((smile, lower, upper))
plt.plot(k, smile, 'k-')
plt.plot(k, lower, 'k--')
plt.plot(k, upper, 'k--')
# plt.show()
total = np.load('rBergomi actual.npy')
plt.plot(k, total[0, :], 'k-')
plt.plot(k, total[1, :], 'k--')
plt.plot(k, total[2, :], 'k--')
'''
'''
functions.rHeston_iv_eur_call(params=functions.rHeston_params('simple'))
functions.rHestonMarkov_iv_eur_call(params=functions.rHeston_params('simple'), N=2, mode='european')
k = np.linspace(-0.4, 0.4, 301)
rBergomi.implied_volatility(rel_tol=1e-02, K=np.exp(k))
rBergomiMarkov.implied_volatility(rel_tol=1e-02, K=np.exp(k), N=2, mode='optimized')
disc = 0.7e-02 + 1.5 * (total[2, :] - total[1, :]) / total[1, :]
plt.plot(k, disc, 'k--', label='Discretization + MC error')
for i in np.array([0, 1, 2, 3, 4, 5]):
    approx = np.load(f'rBergomi actual N={i+1}.npy')
    # plt.plot(k, approx[0, :], '-', color=color(i, 6))
    err = np.abs(total[0, :] - approx[0, :]) / total[0, :]
    plt.plot(k, err, '-', color=color(i, 6), label=f'N={i+1}')
plt.yscale('log')
plt.title('Relative error in rough Bergomi implied volatility\nof Markovian approximations depending on dimension')
plt.xlabel('Log-moneyness')
plt.ylabel('Relative error')
plt.legend(loc='best')
plt.show()
for N in np.array([2]):
    print(N)
    tic = time.perf_counter()
    smile, l, u = rBergomiMarkov.implied_volatility(K=np.exp(k), mode='optimized', N=N, T=T, rel_tol=2e-02, verbose=1)
    # plt.plot(k, smile, '-', color=color(N, 4))
    total = np.empty((3, len(smile)))
    total[0, :] = smile
    total[1, :] = l
    total[2, :] = u
    np.save(f'rBergomi actual N={N}.npy', total)
    print(time.perf_counter() - tic)
    # print((smile, lower, upper))
# plt.show()
print('Finished')
time.sleep(360000)
'''
'''
tic = time.perf_counter()
smile, l, u = rBergomiMarkov.implied_volatility(K=np.exp(k), mode='optimized', N=3, T=T, rel_tol=1e-02, verbose=1)
# plt.plot(k, smile, 'g-')
print(time.perf_counter() - tic)
print((smile, lower, upper))
tic = time.perf_counter()
smile, l, u = rBergomiMarkov.implied_volatility(K=np.exp(k), mode='european', N=3, T=T, rel_tol=1e-02, verbose=1)
# plt.plot(k, smile, 'b-')
print(time.perf_counter() - tic)
print((smile, lower, upper))
print('Finished')
time.sleep(36000)
# plt.show()
'''
'''
params = {'H': 0.05, 'lambda': 0.2, 'rho': -0.6, 'nu': 0.6,
          'theta': 0.01, 'V_0': 0.01, 'S': 1., 'K': np.exp(np.linspace(-1, 0.5, 301)),
          'T': np.linspace(0.04, 1., 25), 'rel_tol': 1e-05}
print(params)
rHeston_iv_eur_call(params=params, load=True, save=True, verbose=1)
print('Finished!')
time.sleep(3600000)

tic = time.perf_counter()
print(rHeston_iv_eur_call(params=rHeston_params('simple'), load=False, save=False, verbose=1))
print(time.perf_counter() - tic)
print('finished')
time.sleep(36000)
'''

'''tic = time.perf_counter()
params = rHeston_params('simple')
rHeston_iv_eur_call(params)
print('time', time.perf_counter()-tic)
time.sleep(36000)
'''

# rHeston_iv_eur_call(params=rHeston_params('simple'), load=False, save=False, verbose=1)

if __name__ == '__main__':
    # 'nu': log_linspace(0.2, 0.6, 2),
    # 'theta': log_linspace(0.01, 0.03, 2),
    # 'V_0': log_linspace(0.01, 0.03, 2)
    # 'lambda': np.array([0.2, 1.0])
    # 'rho': np.array([-0.6, -0.8]),
    '''
    params = {'H': np.array([0.15]), 'lambda': np.array([0.2, 1.0]), 'rho': np.array([-0.6, -0.8]),
              'nu': np.array([0.8]), 'theta': np.array([0.01, 0.03]), 'V_0': np.array([0.01, 0.03])}
    for i in range(25):
        params['T'] = (i+1)/25
        params['K'] = np.exp(np.linspace(-1., 0.5, 301) * np.sqrt(params['T']))
        # print(params)
        rHestonMarkov_iv_eur_call_parallelized(params=params, Ns=np.arange(1, 11), modes=['paper', 'optixmized', 'european'], num_threads=1, verbose=1)
    '''
    '''
    params = {'H': np.array([0.1]), 'lambda': np.array([0.2, 1.0]), 'rho': np.array([-0.6, -0.8]),
              'nu': np.array([0.2]), 'theta': np.array([0.03]), 'V_0': np.array([0.03]),
              'T': np.linspace(0.04, 1., 25), 'K': np.exp(np.linspace(-1., 0.5, 301))}


    rHestonMarkov_iv_eur_call_parallelized(params=params, Ns=np.arange(1, 11),
                                           modes=['paper', 'optimized', 'european'], num_threads=1, verbose=1)
    '''
    '''
    params = {'H': np.array([0.15]), 'lambda': np.array([0.2, 1.0]), 'rho': np.array([-0.6, -0.8]),
              'nu': np.array([0.2, 0.4, 0.6, 0.8]), 'theta': np.array([0.01, 0.03]), 'V_0': np.array([0.01, 0.03]),
              'T': np.linspace(0.04, 1., 25), 'K': np.exp(np.linspace(-1., 0.5, 301))}

    rHeston_iv_eur_call_parallelized(params=params, num_threads=1, verbose=1)
    '''

if __name__ == '__main__':
    # profile("compute_final_rHeston_stock_prices(params='simple', Ns=np.array([2]), N_times=64, modes=['european'], vol_behaviours=['mackevicius'], recompute=True, m=1000000)")
    pass

print('Finished')
for N_times in 2 ** np.arange(11):

    tic = time.perf_counter()
    compute_final_rHeston_stock_prices(params='simple', Ns=np.array([2]), N_times=N_times, modes=['european'], vol_behaviours=['sticky'], recompute=True, m=20000000)
    print(time.perf_counter() - tic)
    tic = time.perf_counter()
    compute_final_rHeston_stock_prices(params='simple', Ns=np.array([2]), N_times=N_times, modes=['european'], vol_behaviours=['mackevicius random'], recompute=True, m=20000000)
    print(time.perf_counter() - tic)
    tic = time.perf_counter()
    compute_final_rHeston_stock_prices(params='simple', Ns=np.array([2]), N_times=N_times, modes=['european'], vol_behaviours=['mackevicius sequential'], recompute=True, m=20000000)
    print(time.perf_counter() - tic)
    tic = time.perf_counter()
    compute_final_rHeston_stock_prices(params='simple', Ns=np.array([2]), N_times=N_times, modes=['european'], vol_behaviours=['mackevicius sequential antithetic'], recompute=True, m=20000000)
    print(time.perf_counter() - tic)

print('Finished')
# time.sleep(360000)

# print(rk.quadrature_rule(0.1, 2, 1))
k = np.sqrt(1) * np.linspace(-1.5, 0.75, 451)[220:-70:5]# [280:-140:10]# [220:-70:5]
params = {'K': np.exp(k), 'T': 1.}
params = rHeston_params(params)
true_smile = Data.true_iv_surface_eur_call[-1, 220:-70:5]
print(k, len(k))

# simulation_errors_depending_on_node_size(params=params, verbose=1, true_smile=true_smile, N_times=2**np.arange(4, 10), largest_nodes=np.linspace(0, 10, 101)/0.04, vol_behaviour='sticky')
# optimize_kernel_approximation_for_simulation_vector_inputs(Ns=np.array([1]), N_times=2 ** np.arange(6, 9), params=params, true_smile=true_smile, plot=True, recompute=True, vol_behaviours=['hyperplane reset'], m=10000000)

# compute_strong_discretization_errors(Ns=np.array([2]), N_times=2 ** np.arange(14), N_time_ref=2 ** 14, vol_behaviours=['hyperplane reset', 'ninomiya victoir', 'sticky'], plot=True)
# compute_smiles_given_stock_prices(params=params, Ns=np.array([2]), N_times=2 ** np.arange(16), modes=None, vol_behaviours=['hyperplane reset', 'ninomiya victoir', 'sticky'], plot=True, true_smile=true_smile)
compute_smiles_given_stock_prices(params=params, Ns=np.array([3]), N_times=2 ** np.arange(11), modes=['european'], vol_behaviours=['sticky', 'mackevicius random', 'mackevicius sequential', 'mackevicius sequential antithetic'], plot=True, true_smile=true_smile)
# compute_smiles_given_stock_prices(params=params, Ns=np.array([2]), N_times=2 ** np.arange(10), modes=['european'], vol_behaviours=['ninomiya victoir', 'correct ninomiya victoir', 'sticky'], plot='vol_behaviour', true_smile=true_smile)
# compute_smiles_given_stock_prices(params=params, Ns=np.array([2]), N_times=2 ** np.arange(10), modes=['european', 'fitted'], vol_behaviours=['hyperplane reset'], plot='mode', true_smile=true_smile)
print('Finished')

